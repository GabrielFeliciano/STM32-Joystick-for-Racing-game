ARM GAS  /tmp/cctN395J.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"usb_pwr.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.PowerOn,"ax",%progbits
  16              		.align	1
  17              		.global	PowerOn
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	PowerOn:
  25              	.LFB29:
  26              		.file 1 "../bootloader/Src/usb_pwr.c"
   1:../bootloader/Src/usb_pwr.c **** /**
   2:../bootloader/Src/usb_pwr.c ****   ******************************************************************************
   3:../bootloader/Src/usb_pwr.c ****   * @file    usb_pwr.c
   4:../bootloader/Src/usb_pwr.c ****   * @author  MCD Application Team
   5:../bootloader/Src/usb_pwr.c ****   * @version V4.1.0
   6:../bootloader/Src/usb_pwr.c ****   * @date    26-May-2017
   7:../bootloader/Src/usb_pwr.c ****   * @brief   Connection/disconnection & power management
   8:../bootloader/Src/usb_pwr.c ****   ******************************************************************************
   9:../bootloader/Src/usb_pwr.c ****   * @attention
  10:../bootloader/Src/usb_pwr.c ****   *
  11:../bootloader/Src/usb_pwr.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  12:../bootloader/Src/usb_pwr.c ****   *
  13:../bootloader/Src/usb_pwr.c ****   * Redistribution and use in source and binary forms, with or without modification,
  14:../bootloader/Src/usb_pwr.c ****   * are permitted provided that the following conditions are met:
  15:../bootloader/Src/usb_pwr.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  16:../bootloader/Src/usb_pwr.c ****   *      this list of conditions and the following disclaimer.
  17:../bootloader/Src/usb_pwr.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  18:../bootloader/Src/usb_pwr.c ****   *      this list of conditions and the following disclaimer in the documentation
  19:../bootloader/Src/usb_pwr.c ****   *      and/or other materials provided with the distribution.
  20:../bootloader/Src/usb_pwr.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  21:../bootloader/Src/usb_pwr.c ****   *      may be used to endorse or promote products derived from this software
  22:../bootloader/Src/usb_pwr.c ****   *      without specific prior written permission.
  23:../bootloader/Src/usb_pwr.c ****   *
  24:../bootloader/Src/usb_pwr.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../bootloader/Src/usb_pwr.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../bootloader/Src/usb_pwr.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../bootloader/Src/usb_pwr.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  28:../bootloader/Src/usb_pwr.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  29:../bootloader/Src/usb_pwr.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  30:../bootloader/Src/usb_pwr.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  31:../bootloader/Src/usb_pwr.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  32:../bootloader/Src/usb_pwr.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  /tmp/cctN395J.s 			page 2


  33:../bootloader/Src/usb_pwr.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../bootloader/Src/usb_pwr.c ****   *
  35:../bootloader/Src/usb_pwr.c ****   ******************************************************************************
  36:../bootloader/Src/usb_pwr.c ****   */
  37:../bootloader/Src/usb_pwr.c **** 
  38:../bootloader/Src/usb_pwr.c **** 
  39:../bootloader/Src/usb_pwr.c **** /* Includes ------------------------------------------------------------------*/
  40:../bootloader/Src/usb_pwr.c **** #include "usb_lib.h"
  41:../bootloader/Src/usb_pwr.c **** #include "usb_pwr.h"
  42:../bootloader/Src/usb_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  43:../bootloader/Src/usb_pwr.c **** /* Private define ------------------------------------------------------------*/
  44:../bootloader/Src/usb_pwr.c **** /* Private macro -------------------------------------------------------------*/
  45:../bootloader/Src/usb_pwr.c **** /* Private variables ---------------------------------------------------------*/
  46:../bootloader/Src/usb_pwr.c **** __IO uint32_t bDeviceState = UNCONNECTED; /* USB device status */
  47:../bootloader/Src/usb_pwr.c **** __IO bool fSuspendEnabled = TRUE;  /* true when suspend is possible */
  48:../bootloader/Src/usb_pwr.c **** __IO uint32_t EP[8];
  49:../bootloader/Src/usb_pwr.c **** 
  50:../bootloader/Src/usb_pwr.c **** struct
  51:../bootloader/Src/usb_pwr.c **** {
  52:../bootloader/Src/usb_pwr.c ****   __IO RESUME_STATE eState;
  53:../bootloader/Src/usb_pwr.c ****   __IO uint8_t bESOFcnt;
  54:../bootloader/Src/usb_pwr.c **** }
  55:../bootloader/Src/usb_pwr.c **** ResumeS;
  56:../bootloader/Src/usb_pwr.c **** 
  57:../bootloader/Src/usb_pwr.c **** __IO uint32_t remotewakeupon=0;
  58:../bootloader/Src/usb_pwr.c **** 
  59:../bootloader/Src/usb_pwr.c **** /* Extern variables ----------------------------------------------------------*/
  60:../bootloader/Src/usb_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  61:../bootloader/Src/usb_pwr.c **** /* Extern function prototypes ------------------------------------------------*/
  62:../bootloader/Src/usb_pwr.c **** /* Private functions ---------------------------------------------------------*/
  63:../bootloader/Src/usb_pwr.c **** 
  64:../bootloader/Src/usb_pwr.c **** /**
  65:../bootloader/Src/usb_pwr.c ****   * Function Name  : PowerOn
  66:../bootloader/Src/usb_pwr.c ****   * Description    :
  67:../bootloader/Src/usb_pwr.c ****   * Input          : None.
  68:../bootloader/Src/usb_pwr.c ****   * Output         : None.
  69:../bootloader/Src/usb_pwr.c ****   * Return         : USB_SUCCESS.
  70:../bootloader/Src/usb_pwr.c ****   */
  71:../bootloader/Src/usb_pwr.c **** RESULT PowerOn(void)
  72:../bootloader/Src/usb_pwr.c **** {
  27              		.loc 1 72 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  73:../bootloader/Src/usb_pwr.c ****   uint16_t wRegVal;
  31              		.loc 1 73 3 view .LVU1
  74:../bootloader/Src/usb_pwr.c ****   
  75:../bootloader/Src/usb_pwr.c **** 
  76:../bootloader/Src/usb_pwr.c ****   /*** CNTR_PWDN = 0 ***/
  77:../bootloader/Src/usb_pwr.c ****   wRegVal = CNTR_FRES;
  32              		.loc 1 77 3 view .LVU2
  33              	.LVL0:
  78:../bootloader/Src/usb_pwr.c ****   _SetCNTR(wRegVal);
  34              		.loc 1 78 3 view .LVU3
  35 0000 0123     		movs	r3, #1
  72:../bootloader/Src/usb_pwr.c ****   uint16_t wRegVal;
  36              		.loc 1 72 1 is_stmt 0 view .LVU4
ARM GAS  /tmp/cctN395J.s 			page 3


  37 0002 70B5     		push	{r4, r5, r6, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 16
  40              		.cfi_offset 4, -16
  41              		.cfi_offset 5, -12
  42              		.cfi_offset 6, -8
  43              		.cfi_offset 14, -4
  79:../bootloader/Src/usb_pwr.c **** 
  80:../bootloader/Src/usb_pwr.c ****   /* The following sequence is recommended:
  81:../bootloader/Src/usb_pwr.c ****     1- FRES = 0
  82:../bootloader/Src/usb_pwr.c ****     2- Wait until RESET flag = 1 (polling)
  83:../bootloader/Src/usb_pwr.c ****     3- clear ISTR register */
  84:../bootloader/Src/usb_pwr.c **** 
  85:../bootloader/Src/usb_pwr.c ****   /*** CNTR_FRES = 0 ***/
  86:../bootloader/Src/usb_pwr.c ****   wInterrupt_Mask = 0;
  44              		.loc 1 86 19 view .LVU5
  45 0004 0024     		movs	r4, #0
  78:../bootloader/Src/usb_pwr.c **** 
  46              		.loc 1 78 3 view .LVU6
  47 0006 084D     		ldr	r5, .L2
  48              		.loc 1 86 19 view .LVU7
  49 0008 084E     		ldr	r6, .L2+4
  78:../bootloader/Src/usb_pwr.c **** 
  50              		.loc 1 78 3 view .LVU8
  51 000a 2B60     		str	r3, [r5]
  52              		.loc 1 86 3 is_stmt 1 view .LVU9
  87:../bootloader/Src/usb_pwr.c ****   
  88:../bootloader/Src/usb_pwr.c ****   _SetCNTR(wInterrupt_Mask);
  89:../bootloader/Src/usb_pwr.c ****   
  90:../bootloader/Src/usb_pwr.c ****   /* Wait until RESET flag = 1 (polling) */
  91:../bootloader/Src/usb_pwr.c ****   while((_GetISTR()&ISTR_RESET) == 1);
  53              		.loc 1 91 10 is_stmt 0 view .LVU10
  54 000c 084B     		ldr	r3, .L2+8
  92:../bootloader/Src/usb_pwr.c ****   
  93:../bootloader/Src/usb_pwr.c ****   /*** Clear pending interrupts ***/
  94:../bootloader/Src/usb_pwr.c ****   SetISTR(0);
  55              		.loc 1 94 3 view .LVU11
  56 000e 2046     		mov	r0, r4
  86:../bootloader/Src/usb_pwr.c ****   
  57              		.loc 1 86 19 view .LVU12
  58 0010 3480     		strh	r4, [r6]	@ movhi
  88:../bootloader/Src/usb_pwr.c ****   
  59              		.loc 1 88 3 is_stmt 1 view .LVU13
  60 0012 2C60     		str	r4, [r5]
  91:../bootloader/Src/usb_pwr.c ****   
  61              		.loc 1 91 3 view .LVU14
  91:../bootloader/Src/usb_pwr.c ****   
  62              		.loc 1 91 38 view .LVU15
  91:../bootloader/Src/usb_pwr.c ****   
  63              		.loc 1 91 8 view .LVU16
  91:../bootloader/Src/usb_pwr.c ****   
  64              		.loc 1 91 10 is_stmt 0 view .LVU17
  65 0014 1B68     		ldr	r3, [r3]
  66              		.loc 1 94 3 is_stmt 1 view .LVU18
  67 0016 FFF7FEFF 		bl	SetISTR
  68              	.LVL1:
  95:../bootloader/Src/usb_pwr.c ****   
ARM GAS  /tmp/cctN395J.s 			page 4


  96:../bootloader/Src/usb_pwr.c ****   /*** Set interrupt mask ***/
  97:../bootloader/Src/usb_pwr.c ****   wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  69              		.loc 1 97 3 view .LVU19
  70              		.loc 1 97 19 is_stmt 0 view .LVU20
  71 001a 4FF4E053 		mov	r3, #7168
  98:../bootloader/Src/usb_pwr.c ****   _SetCNTR(wInterrupt_Mask);
  99:../bootloader/Src/usb_pwr.c ****   
 100:../bootloader/Src/usb_pwr.c ****   return USB_SUCCESS;
 101:../bootloader/Src/usb_pwr.c **** }
  72              		.loc 1 101 1 view .LVU21
  73 001e 2046     		mov	r0, r4
  97:../bootloader/Src/usb_pwr.c ****   _SetCNTR(wInterrupt_Mask);
  74              		.loc 1 97 19 view .LVU22
  75 0020 3380     		strh	r3, [r6]	@ movhi
  98:../bootloader/Src/usb_pwr.c ****   _SetCNTR(wInterrupt_Mask);
  76              		.loc 1 98 3 is_stmt 1 view .LVU23
  77 0022 2B60     		str	r3, [r5]
 100:../bootloader/Src/usb_pwr.c **** }
  78              		.loc 1 100 3 view .LVU24
  79              		.loc 1 101 1 is_stmt 0 view .LVU25
  80 0024 70BD     		pop	{r4, r5, r6, pc}
  81              	.L3:
  82 0026 00BF     		.align	2
  83              	.L2:
  84 0028 405C0040 		.word	1073765440
  85 002c 00000000 		.word	wInterrupt_Mask
  86 0030 445C0040 		.word	1073765444
  87              		.cfi_endproc
  88              	.LFE29:
  90              		.section	.text.PowerOff,"ax",%progbits
  91              		.align	1
  92              		.global	PowerOff
  93              		.syntax unified
  94              		.thumb
  95              		.thumb_func
  96              		.fpu softvfp
  98              	PowerOff:
  99              	.LFB30:
 102:../bootloader/Src/usb_pwr.c **** 
 103:../bootloader/Src/usb_pwr.c **** /**
 104:../bootloader/Src/usb_pwr.c ****   * Function Name  : PowerOff
 105:../bootloader/Src/usb_pwr.c ****   * Description    : handles switch-off conditions
 106:../bootloader/Src/usb_pwr.c ****   * Input          : None.
 107:../bootloader/Src/usb_pwr.c ****   * Output         : None.
 108:../bootloader/Src/usb_pwr.c ****   * Return         : USB_SUCCESS.
 109:../bootloader/Src/usb_pwr.c ****   **/
 110:../bootloader/Src/usb_pwr.c **** RESULT PowerOff()
 111:../bootloader/Src/usb_pwr.c **** {
 100              		.loc 1 111 1 is_stmt 1 view -0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 112:../bootloader/Src/usb_pwr.c ****   /* disable all interrupts and force USB reset */
 113:../bootloader/Src/usb_pwr.c ****   _SetCNTR(CNTR_FRES);
 105              		.loc 1 113 3 view .LVU27
 106 0000 0122     		movs	r2, #1
ARM GAS  /tmp/cctN395J.s 			page 5


 114:../bootloader/Src/usb_pwr.c ****   
 115:../bootloader/Src/usb_pwr.c ****   /* clear interrupt status register */
 116:../bootloader/Src/usb_pwr.c ****   _SetISTR(0);
 107              		.loc 1 116 3 is_stmt 0 view .LVU28
 108 0002 0020     		movs	r0, #0
 113:../bootloader/Src/usb_pwr.c ****   
 109              		.loc 1 113 3 view .LVU29
 110 0004 034B     		ldr	r3, .L5
 111 0006 1A60     		str	r2, [r3]
 112              		.loc 1 116 3 is_stmt 1 view .LVU30
 113 0008 034A     		ldr	r2, .L5+4
 114 000a 1060     		str	r0, [r2]
 117:../bootloader/Src/usb_pwr.c ****   
 118:../bootloader/Src/usb_pwr.c ****   /* switch-off device */
 119:../bootloader/Src/usb_pwr.c ****   _SetCNTR(CNTR_FRES + CNTR_PDWN);
 115              		.loc 1 119 3 view .LVU31
 116 000c 0322     		movs	r2, #3
 117 000e 1A60     		str	r2, [r3]
 120:../bootloader/Src/usb_pwr.c ****   /* sw variables reset */
 121:../bootloader/Src/usb_pwr.c ****   /* ... */
 122:../bootloader/Src/usb_pwr.c **** 
 123:../bootloader/Src/usb_pwr.c ****   return USB_SUCCESS;
 118              		.loc 1 123 3 view .LVU32
 124:../bootloader/Src/usb_pwr.c **** }
 119              		.loc 1 124 1 is_stmt 0 view .LVU33
 120 0010 7047     		bx	lr
 121              	.L6:
 122 0012 00BF     		.align	2
 123              	.L5:
 124 0014 405C0040 		.word	1073765440
 125 0018 445C0040 		.word	1073765444
 126              		.cfi_endproc
 127              	.LFE30:
 129              		.section	.text.Suspend,"ax",%progbits
 130              		.align	1
 131              		.global	Suspend
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 135              		.fpu softvfp
 137              	Suspend:
 138              	.LFB31:
 125:../bootloader/Src/usb_pwr.c **** 
 126:../bootloader/Src/usb_pwr.c **** /**
 127:../bootloader/Src/usb_pwr.c ****   * Function Name  : Suspend
 128:../bootloader/Src/usb_pwr.c ****   * Description    : sets suspend mode operating conditions
 129:../bootloader/Src/usb_pwr.c ****   * Input          : None.
 130:../bootloader/Src/usb_pwr.c ****   * Output         : None.
 131:../bootloader/Src/usb_pwr.c ****   * Return         : USB_SUCCESS.
 132:../bootloader/Src/usb_pwr.c ****   */
 133:../bootloader/Src/usb_pwr.c **** void Suspend(void)
 134:../bootloader/Src/usb_pwr.c **** {
 139              		.loc 1 134 1 is_stmt 1 view -0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 135:../bootloader/Src/usb_pwr.c ****   uint32_t i =0;
ARM GAS  /tmp/cctN395J.s 			page 6


 143              		.loc 1 135 3 view .LVU35
 144              	.LVL2:
 136:../bootloader/Src/usb_pwr.c ****   uint16_t wCNTR;
 145              		.loc 1 136 3 view .LVU36
 137:../bootloader/Src/usb_pwr.c **** #ifdef USB_LOW_PWR_MGMT_SUPPORT
 138:../bootloader/Src/usb_pwr.c ****   uint32_t tmpreg = 0;
 139:../bootloader/Src/usb_pwr.c ****   __IO uint32_t savePWR_CR=0;
 140:../bootloader/Src/usb_pwr.c **** #endif
 141:../bootloader/Src/usb_pwr.c **** 
 142:../bootloader/Src/usb_pwr.c ****   
 143:../bootloader/Src/usb_pwr.c ****   /* suspend preparation */
 144:../bootloader/Src/usb_pwr.c ****   /* ... */
 145:../bootloader/Src/usb_pwr.c ****   
 146:../bootloader/Src/usb_pwr.c ****   /*Store CNTR value */
 147:../bootloader/Src/usb_pwr.c ****   wCNTR = _GetCNTR();  
 146              		.loc 1 147 3 view .LVU37
 134:../bootloader/Src/usb_pwr.c ****   uint32_t i =0;
 147              		.loc 1 134 1 is_stmt 0 view .LVU38
 148 0000 30B5     		push	{r4, r5, lr}
 149              	.LCFI1:
 150              		.cfi_def_cfa_offset 12
 151              		.cfi_offset 4, -12
 152              		.cfi_offset 5, -8
 153              		.cfi_offset 14, -4
 148:../bootloader/Src/usb_pwr.c ****   
 149:../bootloader/Src/usb_pwr.c ****   /* This a sequence to apply a force RESET to handle a robustness case */
 150:../bootloader/Src/usb_pwr.c ****   
 151:../bootloader/Src/usb_pwr.c ****   /*Store endpoints registers status */
 152:../bootloader/Src/usb_pwr.c ****   for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 154              		.loc 1 152 27 view .LVU39
 155 0002 1D4C     		ldr	r4, .L15
 156              		.loc 1 152 9 view .LVU40
 157 0004 0021     		movs	r1, #0
 158 0006 2546     		mov	r5, r4
 147:../bootloader/Src/usb_pwr.c ****   
 159              		.loc 1 147 11 view .LVU41
 160 0008 1C4A     		ldr	r2, .L15+4
 161 000a 1368     		ldr	r3, [r2]
 147:../bootloader/Src/usb_pwr.c ****   
 162              		.loc 1 147 9 view .LVU42
 163 000c 9BB2     		uxth	r3, r3
 164              	.LVL3:
 165              		.loc 1 152 3 is_stmt 1 view .LVU43
 166              		.loc 1 152 12 view .LVU44
 167              	.L8:
 168              		.loc 1 152 21 discriminator 3 view .LVU45
 169 000e 8800     		lsls	r0, r1, #2
 170 0010 00F18040 		add	r0, r0, #1073741824
 171 0014 00F5B840 		add	r0, r0, #23552
 172              		.loc 1 152 29 is_stmt 0 discriminator 3 view .LVU46
 173 0018 0068     		ldr	r0, [r0]
 174 001a 80B2     		uxth	r0, r0
 175              		.loc 1 152 27 discriminator 3 view .LVU47
 176 001c 44F82100 		str	r0, [r4, r1, lsl #2]
 177              		.loc 1 152 16 is_stmt 1 discriminator 3 view .LVU48
 178              		.loc 1 152 17 is_stmt 0 discriminator 3 view .LVU49
 179 0020 0131     		adds	r1, r1, #1
ARM GAS  /tmp/cctN395J.s 			page 7


 180              	.LVL4:
 181              		.loc 1 152 12 is_stmt 1 discriminator 3 view .LVU50
 182              		.loc 1 152 3 is_stmt 0 discriminator 3 view .LVU51
 183 0022 0829     		cmp	r1, #8
 184 0024 F3D1     		bne	.L8
 153:../bootloader/Src/usb_pwr.c ****   
 154:../bootloader/Src/usb_pwr.c ****   /* unmask RESET flag */
 155:../bootloader/Src/usb_pwr.c ****   wCNTR|=CNTR_RESETM;
 185              		.loc 1 155 3 is_stmt 1 view .LVU52
 186              	.LVL5:
 156:../bootloader/Src/usb_pwr.c ****   _SetCNTR(wCNTR);
 187              		.loc 1 156 3 view .LVU53
 188 0026 43F48061 		orr	r1, r3, #1024
 189              	.LVL6:
 190              		.loc 1 156 3 is_stmt 0 view .LVU54
 191 002a 23F00103 		bic	r3, r3, #1
 192              	.LVL7:
 193              		.loc 1 156 3 view .LVU55
 194 002e 1160     		str	r1, [r2]
 157:../bootloader/Src/usb_pwr.c ****   
 158:../bootloader/Src/usb_pwr.c ****   /*apply FRES */
 159:../bootloader/Src/usb_pwr.c ****   wCNTR|=CNTR_FRES;
 195              		.loc 1 159 3 is_stmt 1 view .LVU56
 160:../bootloader/Src/usb_pwr.c ****   _SetCNTR(wCNTR);
 196              		.loc 1 160 3 view .LVU57
 197 0030 98B2     		uxth	r0, r3
 198 0032 41F00101 		orr	r1, r1, #1
 161:../bootloader/Src/usb_pwr.c ****   
 162:../bootloader/Src/usb_pwr.c ****   /*clear FRES*/
 163:../bootloader/Src/usb_pwr.c ****   wCNTR&=~CNTR_FRES;
 164:../bootloader/Src/usb_pwr.c ****   _SetCNTR(wCNTR);
 199              		.loc 1 164 3 is_stmt 0 view .LVU58
 200 0036 43F48063 		orr	r3, r3, #1024
 160:../bootloader/Src/usb_pwr.c ****   _SetCNTR(wCNTR);
 201              		.loc 1 160 3 view .LVU59
 202 003a 1160     		str	r1, [r2]
 163:../bootloader/Src/usb_pwr.c ****   _SetCNTR(wCNTR);
 203              		.loc 1 163 3 is_stmt 1 view .LVU60
 204              	.LVL8:
 205              		.loc 1 164 3 view .LVU61
 206 003c 1360     		str	r3, [r2]
 165:../bootloader/Src/usb_pwr.c ****   
 166:../bootloader/Src/usb_pwr.c ****   /*poll for RESET flag in ISTR*/
 167:../bootloader/Src/usb_pwr.c ****   while((_GetISTR()&ISTR_RESET) == 0);
 207              		.loc 1 167 3 view .LVU62
 208              		.loc 1 167 10 is_stmt 0 view .LVU63
 209 003e 104B     		ldr	r3, .L15+8
 210              	.L9:
 211              		.loc 1 167 38 is_stmt 1 discriminator 1 view .LVU64
 212              		.loc 1 167 8 discriminator 1 view .LVU65
 213              		.loc 1 167 10 is_stmt 0 discriminator 1 view .LVU66
 214 0040 1968     		ldr	r1, [r3]
 215              		.loc 1 167 8 discriminator 1 view .LVU67
 216 0042 4905     		lsls	r1, r1, #21
 217 0044 FCD5     		bpl	.L9
 168:../bootloader/Src/usb_pwr.c ****   
 169:../bootloader/Src/usb_pwr.c ****   /* clear RESET flag in ISTR */
ARM GAS  /tmp/cctN395J.s 			page 8


 170:../bootloader/Src/usb_pwr.c ****   _SetISTR((uint16_t)CLR_RESET);
 218              		.loc 1 170 3 is_stmt 1 view .LVU68
 219 0046 4FF6FF31 		movw	r1, #64511
 220 004a 1960     		str	r1, [r3]
 171:../bootloader/Src/usb_pwr.c ****   
 172:../bootloader/Src/usb_pwr.c ****   /*restore Enpoints*/
 173:../bootloader/Src/usb_pwr.c ****   for (i=0;i<8;i++)
 221              		.loc 1 173 3 view .LVU69
 222              	.LVL9:
 223              		.loc 1 173 12 view .LVU70
 224              		.loc 1 173 9 is_stmt 0 view .LVU71
 225 004c 0023     		movs	r3, #0
 226              	.LVL10:
 227              	.L10:
 174:../bootloader/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 228              		.loc 1 174 5 is_stmt 1 discriminator 3 view .LVU72
 229 004e 55F82340 		ldr	r4, [r5, r3, lsl #2]
 230 0052 9900     		lsls	r1, r3, #2
 231 0054 01F18041 		add	r1, r1, #1073741824
 173:../bootloader/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 232              		.loc 1 173 17 is_stmt 0 discriminator 3 view .LVU73
 233 0058 0133     		adds	r3, r3, #1
 234              	.LVL11:
 173:../bootloader/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 235              		.loc 1 173 17 discriminator 3 view .LVU74
 236 005a 01F5B841 		add	r1, r1, #23552
 237 005e A4B2     		uxth	r4, r4
 173:../bootloader/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 238              		.loc 1 173 3 discriminator 3 view .LVU75
 239 0060 082B     		cmp	r3, #8
 240              		.loc 1 174 5 discriminator 3 view .LVU76
 241 0062 0C60     		str	r4, [r1]
 173:../bootloader/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 242              		.loc 1 173 16 is_stmt 1 discriminator 3 view .LVU77
 243              	.LVL12:
 173:../bootloader/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 244              		.loc 1 173 12 discriminator 3 view .LVU78
 173:../bootloader/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 245              		.loc 1 173 3 is_stmt 0 discriminator 3 view .LVU79
 246 0064 F3D1     		bne	.L10
 175:../bootloader/Src/usb_pwr.c ****   
 176:../bootloader/Src/usb_pwr.c ****   /* Now it is safe to enter macrocell in suspend mode */
 177:../bootloader/Src/usb_pwr.c ****   wCNTR |= CNTR_FSUSP;
 247              		.loc 1 177 3 is_stmt 1 view .LVU80
 248              	.LVL13:
 178:../bootloader/Src/usb_pwr.c ****   _SetCNTR(wCNTR);
 249              		.loc 1 178 3 view .LVU81
 250 0066 40F48160 		orr	r0, r0, #1032
 251              	.LVL14:
 252              		.loc 1 178 3 is_stmt 0 view .LVU82
 253 006a 1060     		str	r0, [r2]
 179:../bootloader/Src/usb_pwr.c ****   
 180:../bootloader/Src/usb_pwr.c ****   /* force low-power mode in the macrocell */
 181:../bootloader/Src/usb_pwr.c ****   wCNTR = _GetCNTR();
 254              		.loc 1 181 3 is_stmt 1 view .LVU83
 255              		.loc 1 181 11 is_stmt 0 view .LVU84
 256 006c 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cctN395J.s 			page 9


 257              	.LVL15:
 258              		.loc 1 181 9 view .LVU85
 259 006e 9BB2     		uxth	r3, r3
 260              	.LVL16:
 182:../bootloader/Src/usb_pwr.c ****   wCNTR |= CNTR_LPMODE;
 261              		.loc 1 182 3 is_stmt 1 view .LVU86
 183:../bootloader/Src/usb_pwr.c ****   _SetCNTR(wCNTR);
 262              		.loc 1 183 3 view .LVU87
 263 0070 43F00403 		orr	r3, r3, #4
 264              	.LVL17:
 265              		.loc 1 183 3 is_stmt 0 view .LVU88
 266 0074 1360     		str	r3, [r2]
 184:../bootloader/Src/usb_pwr.c ****   
 185:../bootloader/Src/usb_pwr.c **** #ifdef USB_LOW_PWR_MGMT_SUPPORT
 186:../bootloader/Src/usb_pwr.c ****   /*prepare entry in low power mode (STOP mode)*/
 187:../bootloader/Src/usb_pwr.c ****   /* Select the regulator state in STOP mode*/
 188:../bootloader/Src/usb_pwr.c ****   savePWR_CR = PWR->CR;
 189:../bootloader/Src/usb_pwr.c ****   tmpreg = PWR->CR;
 190:../bootloader/Src/usb_pwr.c ****   /* Clear PDDS and LPDS bits */
 191:../bootloader/Src/usb_pwr.c ****   tmpreg &= ((uint32_t)0xFFFFFFFC);
 192:../bootloader/Src/usb_pwr.c ****   /* Set LPDS bit according to PWR_Regulator value */
 193:../bootloader/Src/usb_pwr.c ****   tmpreg |= PWR_Regulator_LowPower;
 194:../bootloader/Src/usb_pwr.c ****   /* Store the new value */
 195:../bootloader/Src/usb_pwr.c ****   PWR->CR = tmpreg;
 196:../bootloader/Src/usb_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 197:../bootloader/Src/usb_pwr.c **** #if defined(STM32F303xE) || defined(STM32F303xC) || defined (STM32F37X)
 198:../bootloader/Src/usb_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 199:../bootloader/Src/usb_pwr.c **** #else
 200:../bootloader/Src/usb_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP;       
 201:../bootloader/Src/usb_pwr.c **** #endif
 202:../bootloader/Src/usb_pwr.c ****   
 203:../bootloader/Src/usb_pwr.c ****   /* enter system in STOP mode, only when wakeup flag in not set */
 204:../bootloader/Src/usb_pwr.c ****   if((_GetISTR()&ISTR_WKUP)==0)
 205:../bootloader/Src/usb_pwr.c ****   {
 206:../bootloader/Src/usb_pwr.c ****     __WFI();
 207:../bootloader/Src/usb_pwr.c ****     /* Reset SLEEPDEEP bit of Cortex System Control Register */
 208:../bootloader/Src/usb_pwr.c **** #if defined(STM32F303xE) || defined(STM32F303xC) || defined (STM32F37X)
 209:../bootloader/Src/usb_pwr.c ****     SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
 210:../bootloader/Src/usb_pwr.c **** #else
 211:../bootloader/Src/usb_pwr.c ****     SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 212:../bootloader/Src/usb_pwr.c **** #endif
 213:../bootloader/Src/usb_pwr.c ****   }
 214:../bootloader/Src/usb_pwr.c ****   else
 215:../bootloader/Src/usb_pwr.c ****   {
 216:../bootloader/Src/usb_pwr.c ****     /* Clear Wakeup flag */
 217:../bootloader/Src/usb_pwr.c ****     _SetISTR(CLR_WKUP);
 218:../bootloader/Src/usb_pwr.c ****     /* clear FSUSP to abort entry in suspend mode  */
 219:../bootloader/Src/usb_pwr.c ****     wCNTR = _GetCNTR();
 220:../bootloader/Src/usb_pwr.c ****     wCNTR&=~CNTR_FSUSP;
 221:../bootloader/Src/usb_pwr.c ****     _SetCNTR(wCNTR);
 222:../bootloader/Src/usb_pwr.c ****     
 223:../bootloader/Src/usb_pwr.c ****     /*restore sleep mode configuration */ 
 224:../bootloader/Src/usb_pwr.c ****     /* restore Power regulator config in sleep mode*/
 225:../bootloader/Src/usb_pwr.c ****     PWR->CR = savePWR_CR;
 226:../bootloader/Src/usb_pwr.c ****     
 227:../bootloader/Src/usb_pwr.c ****     /* Reset SLEEPDEEP bit of Cortex System Control Register */
 228:../bootloader/Src/usb_pwr.c **** #if defined(STM32F303xE) || defined(STM32F303xC) || defined (STM32F37X)
ARM GAS  /tmp/cctN395J.s 			page 10


 229:../bootloader/Src/usb_pwr.c ****     SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 230:../bootloader/Src/usb_pwr.c **** #else
 231:../bootloader/Src/usb_pwr.c ****     SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 232:../bootloader/Src/usb_pwr.c **** #endif
 233:../bootloader/Src/usb_pwr.c ****   }
 234:../bootloader/Src/usb_pwr.c **** #endif /* USB_LOW_PWR_MGMT_SUPPORT */
 235:../bootloader/Src/usb_pwr.c **** }
 267              		.loc 1 235 1 view .LVU89
 268 0076 30BD     		pop	{r4, r5, pc}
 269              	.L16:
 270              		.align	2
 271              	.L15:
 272 0078 00000000 		.word	EP
 273 007c 405C0040 		.word	1073765440
 274 0080 445C0040 		.word	1073765444
 275              		.cfi_endproc
 276              	.LFE31:
 278              		.section	.text.Resume_Init,"ax",%progbits
 279              		.align	1
 280              		.global	Resume_Init
 281              		.syntax unified
 282              		.thumb
 283              		.thumb_func
 284              		.fpu softvfp
 286              	Resume_Init:
 287              	.LFB32:
 236:../bootloader/Src/usb_pwr.c **** 
 237:../bootloader/Src/usb_pwr.c **** /**
 238:../bootloader/Src/usb_pwr.c ****   * Function Name  : Resume_Init
 239:../bootloader/Src/usb_pwr.c ****   * Description    : Handles wake-up restoring normal operations
 240:../bootloader/Src/usb_pwr.c ****   * Input          : None.
 241:../bootloader/Src/usb_pwr.c ****   * Output         : None.
 242:../bootloader/Src/usb_pwr.c ****   * Return         : USB_SUCCESS.
 243:../bootloader/Src/usb_pwr.c ****   */
 244:../bootloader/Src/usb_pwr.c **** void Resume_Init(void)
 245:../bootloader/Src/usb_pwr.c **** {
 288              		.loc 1 245 1 is_stmt 1 view -0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              		@ link register save eliminated.
 246:../bootloader/Src/usb_pwr.c ****   uint16_t wCNTR;
 293              		.loc 1 246 3 view .LVU91
 247:../bootloader/Src/usb_pwr.c ****   
 248:../bootloader/Src/usb_pwr.c ****   /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
 249:../bootloader/Src/usb_pwr.c ****   /* restart the clocks */
 250:../bootloader/Src/usb_pwr.c ****   /* ...  */
 251:../bootloader/Src/usb_pwr.c **** 
 252:../bootloader/Src/usb_pwr.c ****   /* CNTR_LPMODE = 0 */
 253:../bootloader/Src/usb_pwr.c ****   wCNTR = _GetCNTR();
 294              		.loc 1 253 3 view .LVU92
 254:../bootloader/Src/usb_pwr.c ****   wCNTR &= (~CNTR_LPMODE);
 255:../bootloader/Src/usb_pwr.c ****   _SetCNTR(wCNTR);    
 295              		.loc 1 255 3 is_stmt 0 view .LVU93
 296 0000 4FF6FB72 		movw	r2, #65531
 253:../bootloader/Src/usb_pwr.c ****   wCNTR &= (~CNTR_LPMODE);
 297              		.loc 1 253 11 view .LVU94
ARM GAS  /tmp/cctN395J.s 			page 11


 298 0004 034B     		ldr	r3, .L18
 299 0006 1968     		ldr	r1, [r3]
 300              	.LVL18:
 254:../bootloader/Src/usb_pwr.c ****   wCNTR &= (~CNTR_LPMODE);
 301              		.loc 1 254 3 is_stmt 1 view .LVU95
 302              		.loc 1 255 3 view .LVU96
 303 0008 0A40     		ands	r2, r2, r1
 304 000a 1A60     		str	r2, [r3]
 256:../bootloader/Src/usb_pwr.c **** 
 257:../bootloader/Src/usb_pwr.c **** #ifdef USB_LOW_PWR_MGMT_SUPPORT  
 258:../bootloader/Src/usb_pwr.c ****   /* restore full power */
 259:../bootloader/Src/usb_pwr.c ****   /* ... on connected devices */
 260:../bootloader/Src/usb_pwr.c ****   Leave_LowPowerMode();
 261:../bootloader/Src/usb_pwr.c ****   
 262:../bootloader/Src/usb_pwr.c **** #endif /* USB_LOW_PWR_MGMT_SUPPORT */
 263:../bootloader/Src/usb_pwr.c ****   /* reset FSUSP bit */
 264:../bootloader/Src/usb_pwr.c ****   _SetCNTR(IMR_MSK);
 305              		.loc 1 264 3 view .LVU97
 306 000c 4FF43F42 		mov	r2, #48896
 307 0010 1A60     		str	r2, [r3]
 265:../bootloader/Src/usb_pwr.c **** 
 266:../bootloader/Src/usb_pwr.c ****   /* reverse suspend preparation */
 267:../bootloader/Src/usb_pwr.c ****   /* ... */ 
 268:../bootloader/Src/usb_pwr.c **** 
 269:../bootloader/Src/usb_pwr.c **** }
 308              		.loc 1 269 1 is_stmt 0 view .LVU98
 309 0012 7047     		bx	lr
 310              	.L19:
 311              		.align	2
 312              	.L18:
 313 0014 405C0040 		.word	1073765440
 314              		.cfi_endproc
 315              	.LFE32:
 317              		.section	.text.Resume,"ax",%progbits
 318              		.align	1
 319              		.global	Resume
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 323              		.fpu softvfp
 325              	Resume:
 326              	.LVL19:
 327              	.LFB33:
 270:../bootloader/Src/usb_pwr.c **** 
 271:../bootloader/Src/usb_pwr.c **** /*******************************************************************************
 272:../bootloader/Src/usb_pwr.c **** * Function Name  : Resume
 273:../bootloader/Src/usb_pwr.c **** * Description    : This is the state machine handling resume operations and
 274:../bootloader/Src/usb_pwr.c **** *                 timing sequence. The control is based on the Resume structure
 275:../bootloader/Src/usb_pwr.c **** *                 variables and on the ESOF interrupt calling this subroutine
 276:../bootloader/Src/usb_pwr.c **** *                 without changing machine state.
 277:../bootloader/Src/usb_pwr.c **** * Input          : a state machine value (RESUME_STATE)
 278:../bootloader/Src/usb_pwr.c **** *                  RESUME_ESOF doesn't change ResumeS.eState allowing
 279:../bootloader/Src/usb_pwr.c **** *                  decrementing of the ESOF counter in different states.
 280:../bootloader/Src/usb_pwr.c **** * Output         : None.
 281:../bootloader/Src/usb_pwr.c **** * Return         : None.
 282:../bootloader/Src/usb_pwr.c **** *******************************************************************************/
 283:../bootloader/Src/usb_pwr.c **** void Resume(RESUME_STATE eResumeSetVal)
ARM GAS  /tmp/cctN395J.s 			page 12


 284:../bootloader/Src/usb_pwr.c **** {
 328              		.loc 1 284 1 is_stmt 1 view -0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 285:../bootloader/Src/usb_pwr.c ****   uint16_t wCNTR;
 332              		.loc 1 285 3 view .LVU100
 286:../bootloader/Src/usb_pwr.c **** 
 287:../bootloader/Src/usb_pwr.c ****   if (eResumeSetVal != RESUME_ESOF)
 333              		.loc 1 287 3 view .LVU101
 284:../bootloader/Src/usb_pwr.c ****   uint16_t wCNTR;
 334              		.loc 1 284 1 is_stmt 0 view .LVU102
 335 0000 10B5     		push	{r4, lr}
 336              	.LCFI2:
 337              		.cfi_def_cfa_offset 8
 338              		.cfi_offset 4, -8
 339              		.cfi_offset 14, -4
 340 0002 254C     		ldr	r4, .L38
 288:../bootloader/Src/usb_pwr.c ****     ResumeS.eState = eResumeSetVal;
 341              		.loc 1 288 5 is_stmt 1 view .LVU103
 287:../bootloader/Src/usb_pwr.c ****     ResumeS.eState = eResumeSetVal;
 342              		.loc 1 287 6 is_stmt 0 view .LVU104
 343 0004 0728     		cmp	r0, #7
 344              		.loc 1 288 20 view .LVU105
 345 0006 18BF     		it	ne
 346 0008 2070     		strbne	r0, [r4]
 289:../bootloader/Src/usb_pwr.c ****   switch (ResumeS.eState)
 347              		.loc 1 289 3 is_stmt 1 view .LVU106
 348              		.loc 1 289 18 is_stmt 0 view .LVU107
 349 000a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 350 000c 052B     		cmp	r3, #5
 351 000e 09D8     		bhi	.L22
 352 0010 DFE803F0 		tbb	[pc, r3]
 353              	.L24:
 354 0014 03       		.byte	(.L29-.L24)/2
 355 0015 0D       		.byte	(.L28-.L24)/2
 356 0016 15       		.byte	(.L27-.L24)/2
 357 0017 19       		.byte	(.L26-.L24)/2
 358 0018 22       		.byte	(.L25-.L24)/2
 359 0019 2D       		.byte	(.L23-.L24)/2
 360              		.p2align 1
 361              	.L29:
 290:../bootloader/Src/usb_pwr.c ****   {
 291:../bootloader/Src/usb_pwr.c ****     case RESUME_EXTERNAL:
 292:../bootloader/Src/usb_pwr.c ****       if (remotewakeupon ==0)
 362              		.loc 1 292 7 is_stmt 1 view .LVU108
 363              		.loc 1 292 26 is_stmt 0 view .LVU109
 364 001a 204B     		ldr	r3, .L38+4
 365 001c 1B68     		ldr	r3, [r3]
 366              		.loc 1 292 10 view .LVU110
 367 001e 1BB9     		cbnz	r3, .L30
 293:../bootloader/Src/usb_pwr.c ****       {
 294:../bootloader/Src/usb_pwr.c ****         Resume_Init();
 368              		.loc 1 294 9 is_stmt 1 view .LVU111
 369 0020 FFF7FEFF 		bl	Resume_Init
 370              	.LVL20:
 295:../bootloader/Src/usb_pwr.c ****         ResumeS.eState = RESUME_OFF;
ARM GAS  /tmp/cctN395J.s 			page 13


 371              		.loc 1 295 9 view .LVU112
 372              	.L22:
 296:../bootloader/Src/usb_pwr.c ****       }
 297:../bootloader/Src/usb_pwr.c ****       else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
 298:../bootloader/Src/usb_pwr.c ****       {
 299:../bootloader/Src/usb_pwr.c ****         ResumeS.eState = RESUME_ON;
 300:../bootloader/Src/usb_pwr.c ****       }
 301:../bootloader/Src/usb_pwr.c ****       break;
 302:../bootloader/Src/usb_pwr.c ****     case RESUME_INTERNAL:
 303:../bootloader/Src/usb_pwr.c ****       Resume_Init();
 304:../bootloader/Src/usb_pwr.c ****       ResumeS.eState = RESUME_START;
 305:../bootloader/Src/usb_pwr.c ****       remotewakeupon = 1;
 306:../bootloader/Src/usb_pwr.c ****       break;
 307:../bootloader/Src/usb_pwr.c ****     case RESUME_LATER:
 308:../bootloader/Src/usb_pwr.c ****       ResumeS.bESOFcnt = 2;
 309:../bootloader/Src/usb_pwr.c ****       ResumeS.eState = RESUME_WAIT;
 310:../bootloader/Src/usb_pwr.c ****       break;
 311:../bootloader/Src/usb_pwr.c ****     case RESUME_WAIT:
 312:../bootloader/Src/usb_pwr.c ****       ResumeS.bESOFcnt--;
 313:../bootloader/Src/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 314:../bootloader/Src/usb_pwr.c ****         ResumeS.eState = RESUME_START;
 315:../bootloader/Src/usb_pwr.c ****       break;
 316:../bootloader/Src/usb_pwr.c ****     case RESUME_START:
 317:../bootloader/Src/usb_pwr.c ****       wCNTR = _GetCNTR();
 318:../bootloader/Src/usb_pwr.c ****       wCNTR |= CNTR_RESUME;
 319:../bootloader/Src/usb_pwr.c ****       _SetCNTR(wCNTR);
 320:../bootloader/Src/usb_pwr.c ****       ResumeS.eState = RESUME_ON;
 321:../bootloader/Src/usb_pwr.c ****       ResumeS.bESOFcnt = 10;
 322:../bootloader/Src/usb_pwr.c ****       break;
 323:../bootloader/Src/usb_pwr.c ****     case RESUME_ON:    
 324:../bootloader/Src/usb_pwr.c ****       ResumeS.bESOFcnt--;
 325:../bootloader/Src/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 326:../bootloader/Src/usb_pwr.c ****       {
 327:../bootloader/Src/usb_pwr.c ****         wCNTR = _GetCNTR();
 328:../bootloader/Src/usb_pwr.c ****         wCNTR &= (~CNTR_RESUME);
 329:../bootloader/Src/usb_pwr.c ****         _SetCNTR(wCNTR);
 330:../bootloader/Src/usb_pwr.c ****         ResumeS.eState = RESUME_OFF;
 331:../bootloader/Src/usb_pwr.c ****         remotewakeupon = 0;
 332:../bootloader/Src/usb_pwr.c ****       }
 333:../bootloader/Src/usb_pwr.c ****       break;
 334:../bootloader/Src/usb_pwr.c ****     case RESUME_OFF:
 335:../bootloader/Src/usb_pwr.c ****     case RESUME_ESOF:
 336:../bootloader/Src/usb_pwr.c ****     default:
 337:../bootloader/Src/usb_pwr.c ****       ResumeS.eState = RESUME_OFF;
 373              		.loc 1 337 7 view .LVU113
 374              		.loc 1 337 22 is_stmt 0 view .LVU114
 375 0024 0623     		movs	r3, #6
 376 0026 00E0     		b	.L37
 377              	.L30:
 299:../bootloader/Src/usb_pwr.c ****       }
 378              		.loc 1 299 9 is_stmt 1 view .LVU115
 299:../bootloader/Src/usb_pwr.c ****       }
 379              		.loc 1 299 24 is_stmt 0 view .LVU116
 380 0028 0523     		movs	r3, #5
 381              	.L37:
 382              		.loc 1 337 22 view .LVU117
 383 002a 2370     		strb	r3, [r4]
ARM GAS  /tmp/cctN395J.s 			page 14


 338:../bootloader/Src/usb_pwr.c ****       break;
 384              		.loc 1 338 7 is_stmt 1 view .LVU118
 339:../bootloader/Src/usb_pwr.c ****   }
 340:../bootloader/Src/usb_pwr.c **** }
 385              		.loc 1 340 1 is_stmt 0 view .LVU119
 386 002c 06E0     		b	.L20
 387              	.L28:
 303:../bootloader/Src/usb_pwr.c ****       ResumeS.eState = RESUME_START;
 388              		.loc 1 303 7 is_stmt 1 view .LVU120
 389 002e FFF7FEFF 		bl	Resume_Init
 390              	.LVL21:
 304:../bootloader/Src/usb_pwr.c ****       remotewakeupon = 1;
 391              		.loc 1 304 7 view .LVU121
 304:../bootloader/Src/usb_pwr.c ****       remotewakeupon = 1;
 392              		.loc 1 304 22 is_stmt 0 view .LVU122
 393 0032 0423     		movs	r3, #4
 305:../bootloader/Src/usb_pwr.c ****       break;
 394              		.loc 1 305 22 view .LVU123
 395 0034 0122     		movs	r2, #1
 304:../bootloader/Src/usb_pwr.c ****       remotewakeupon = 1;
 396              		.loc 1 304 22 view .LVU124
 397 0036 2370     		strb	r3, [r4]
 305:../bootloader/Src/usb_pwr.c ****       break;
 398              		.loc 1 305 7 is_stmt 1 view .LVU125
 305:../bootloader/Src/usb_pwr.c ****       break;
 399              		.loc 1 305 22 is_stmt 0 view .LVU126
 400 0038 184B     		ldr	r3, .L38+4
 401 003a 1A60     		str	r2, [r3]
 306:../bootloader/Src/usb_pwr.c ****     case RESUME_LATER:
 402              		.loc 1 306 7 is_stmt 1 view .LVU127
 403              	.LVL22:
 404              	.L20:
 405              		.loc 1 340 1 is_stmt 0 view .LVU128
 406 003c 10BD     		pop	{r4, pc}
 407              	.LVL23:
 408              	.L27:
 308:../bootloader/Src/usb_pwr.c ****       ResumeS.eState = RESUME_WAIT;
 409              		.loc 1 308 7 is_stmt 1 view .LVU129
 308:../bootloader/Src/usb_pwr.c ****       ResumeS.eState = RESUME_WAIT;
 410              		.loc 1 308 24 is_stmt 0 view .LVU130
 411 003e 0223     		movs	r3, #2
 412 0040 6370     		strb	r3, [r4, #1]
 309:../bootloader/Src/usb_pwr.c ****       break;
 413              		.loc 1 309 7 is_stmt 1 view .LVU131
 309:../bootloader/Src/usb_pwr.c ****       break;
 414              		.loc 1 309 22 is_stmt 0 view .LVU132
 415 0042 0323     		movs	r3, #3
 416 0044 F1E7     		b	.L37
 417              	.L26:
 312:../bootloader/Src/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 418              		.loc 1 312 7 is_stmt 1 view .LVU133
 312:../bootloader/Src/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 419              		.loc 1 312 14 is_stmt 0 view .LVU134
 420 0046 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 312:../bootloader/Src/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 421              		.loc 1 312 23 view .LVU135
 422 0048 013B     		subs	r3, r3, #1
ARM GAS  /tmp/cctN395J.s 			page 15


 423 004a DBB2     		uxtb	r3, r3
 424 004c 6370     		strb	r3, [r4, #1]
 313:../bootloader/Src/usb_pwr.c ****         ResumeS.eState = RESUME_START;
 425              		.loc 1 313 7 is_stmt 1 view .LVU136
 313:../bootloader/Src/usb_pwr.c ****         ResumeS.eState = RESUME_START;
 426              		.loc 1 313 18 is_stmt 0 view .LVU137
 427 004e 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 313:../bootloader/Src/usb_pwr.c ****         ResumeS.eState = RESUME_START;
 428              		.loc 1 313 10 view .LVU138
 429 0050 002B     		cmp	r3, #0
 430 0052 F3D1     		bne	.L20
 314:../bootloader/Src/usb_pwr.c ****       break;
 431              		.loc 1 314 9 is_stmt 1 view .LVU139
 314:../bootloader/Src/usb_pwr.c ****       break;
 432              		.loc 1 314 24 is_stmt 0 view .LVU140
 433 0054 0423     		movs	r3, #4
 434 0056 E8E7     		b	.L37
 435              	.L25:
 317:../bootloader/Src/usb_pwr.c ****       wCNTR |= CNTR_RESUME;
 436              		.loc 1 317 7 is_stmt 1 view .LVU141
 317:../bootloader/Src/usb_pwr.c ****       wCNTR |= CNTR_RESUME;
 437              		.loc 1 317 15 is_stmt 0 view .LVU142
 438 0058 114A     		ldr	r2, .L38+8
 439 005a 1368     		ldr	r3, [r2]
 317:../bootloader/Src/usb_pwr.c ****       wCNTR |= CNTR_RESUME;
 440              		.loc 1 317 13 view .LVU143
 441 005c 9BB2     		uxth	r3, r3
 442              	.LVL24:
 318:../bootloader/Src/usb_pwr.c ****       _SetCNTR(wCNTR);
 443              		.loc 1 318 7 is_stmt 1 view .LVU144
 319:../bootloader/Src/usb_pwr.c ****       ResumeS.eState = RESUME_ON;
 444              		.loc 1 319 7 view .LVU145
 445 005e 43F01003 		orr	r3, r3, #16
 446              	.LVL25:
 319:../bootloader/Src/usb_pwr.c ****       ResumeS.eState = RESUME_ON;
 447              		.loc 1 319 7 is_stmt 0 view .LVU146
 448 0062 1360     		str	r3, [r2]
 320:../bootloader/Src/usb_pwr.c ****       ResumeS.bESOFcnt = 10;
 449              		.loc 1 320 7 is_stmt 1 view .LVU147
 320:../bootloader/Src/usb_pwr.c ****       ResumeS.bESOFcnt = 10;
 450              		.loc 1 320 22 is_stmt 0 view .LVU148
 451 0064 0523     		movs	r3, #5
 452 0066 2370     		strb	r3, [r4]
 321:../bootloader/Src/usb_pwr.c ****       break;
 453              		.loc 1 321 7 is_stmt 1 view .LVU149
 321:../bootloader/Src/usb_pwr.c ****       break;
 454              		.loc 1 321 24 is_stmt 0 view .LVU150
 455 0068 0A23     		movs	r3, #10
 456 006a 6370     		strb	r3, [r4, #1]
 322:../bootloader/Src/usb_pwr.c ****     case RESUME_ON:    
 457              		.loc 1 322 7 is_stmt 1 view .LVU151
 458 006c E6E7     		b	.L20
 459              	.L23:
 324:../bootloader/Src/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 460              		.loc 1 324 7 view .LVU152
 324:../bootloader/Src/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 461              		.loc 1 324 14 is_stmt 0 view .LVU153
ARM GAS  /tmp/cctN395J.s 			page 16


 462 006e 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 324:../bootloader/Src/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 463              		.loc 1 324 23 view .LVU154
 464 0070 013B     		subs	r3, r3, #1
 465 0072 DBB2     		uxtb	r3, r3
 466 0074 6370     		strb	r3, [r4, #1]
 325:../bootloader/Src/usb_pwr.c ****       {
 467              		.loc 1 325 7 is_stmt 1 view .LVU155
 325:../bootloader/Src/usb_pwr.c ****       {
 468              		.loc 1 325 18 is_stmt 0 view .LVU156
 469 0076 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 325:../bootloader/Src/usb_pwr.c ****       {
 470              		.loc 1 325 10 view .LVU157
 471 0078 03F0FF01 		and	r1, r3, #255
 472 007c 002B     		cmp	r3, #0
 473 007e DDD1     		bne	.L20
 327:../bootloader/Src/usb_pwr.c ****         wCNTR &= (~CNTR_RESUME);
 474              		.loc 1 327 9 is_stmt 1 view .LVU158
 329:../bootloader/Src/usb_pwr.c ****         ResumeS.eState = RESUME_OFF;
 475              		.loc 1 329 9 is_stmt 0 view .LVU159
 476 0080 4FF6EF73 		movw	r3, #65519
 327:../bootloader/Src/usb_pwr.c ****         wCNTR &= (~CNTR_RESUME);
 477              		.loc 1 327 17 view .LVU160
 478 0084 064A     		ldr	r2, .L38+8
 479 0086 1068     		ldr	r0, [r2]
 480              	.LVL26:
 328:../bootloader/Src/usb_pwr.c ****         _SetCNTR(wCNTR);
 481              		.loc 1 328 9 is_stmt 1 view .LVU161
 329:../bootloader/Src/usb_pwr.c ****         ResumeS.eState = RESUME_OFF;
 482              		.loc 1 329 9 view .LVU162
 483 0088 0340     		ands	r3, r3, r0
 484 008a 1360     		str	r3, [r2]
 330:../bootloader/Src/usb_pwr.c ****         remotewakeupon = 0;
 485              		.loc 1 330 9 view .LVU163
 330:../bootloader/Src/usb_pwr.c ****         remotewakeupon = 0;
 486              		.loc 1 330 24 is_stmt 0 view .LVU164
 487 008c 0623     		movs	r3, #6
 488 008e 2370     		strb	r3, [r4]
 331:../bootloader/Src/usb_pwr.c ****       }
 489              		.loc 1 331 9 is_stmt 1 view .LVU165
 331:../bootloader/Src/usb_pwr.c ****       }
 490              		.loc 1 331 24 is_stmt 0 view .LVU166
 491 0090 024B     		ldr	r3, .L38+4
 492 0092 1960     		str	r1, [r3]
 493 0094 D2E7     		b	.L20
 494              	.L39:
 495 0096 00BF     		.align	2
 496              	.L38:
 497 0098 00000000 		.word	ResumeS
 498 009c 00000000 		.word	.LANCHOR0
 499 00a0 405C0040 		.word	1073765440
 500              		.cfi_endproc
 501              	.LFE33:
 503              		.global	remotewakeupon
 504              		.comm	ResumeS,2,1
 505              		.comm	EP,32,4
 506              		.global	fSuspendEnabled
ARM GAS  /tmp/cctN395J.s 			page 17


 507              		.global	bDeviceState
 508              		.section	.bss.bDeviceState,"aw",%nobits
 509              		.align	2
 512              	bDeviceState:
 513 0000 00000000 		.space	4
 514              		.section	.bss.remotewakeupon,"aw",%nobits
 515              		.align	2
 516              		.set	.LANCHOR0,. + 0
 519              	remotewakeupon:
 520 0000 00000000 		.space	4
 521              		.section	.data.fSuspendEnabled,"aw"
 524              	fSuspendEnabled:
 525 0000 01       		.byte	1
 526              		.text
 527              	.Letext0:
 528              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 529              		.file 3 "../Drivers/CMSIS/CM3/CoreSupport/core_cm3.h"
 530              		.file 4 "../Drivers/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h"
 531              		.file 5 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_type.h"
 532              		.file 6 "../bootloader/Inc/usb_hw.h"
 533              		.file 7 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_regs.h"
 534              		.file 8 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_core.h"
 535              		.file 9 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_init.h"
 536              		.file 10 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_lib.h"
 537              		.file 11 "../bootloader/Inc/usb_pwr.h"
ARM GAS  /tmp/cctN395J.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_pwr.c
     /tmp/cctN395J.s:16     .text.PowerOn:0000000000000000 $t
     /tmp/cctN395J.s:24     .text.PowerOn:0000000000000000 PowerOn
     /tmp/cctN395J.s:84     .text.PowerOn:0000000000000028 $d
     /tmp/cctN395J.s:91     .text.PowerOff:0000000000000000 $t
     /tmp/cctN395J.s:98     .text.PowerOff:0000000000000000 PowerOff
     /tmp/cctN395J.s:124    .text.PowerOff:0000000000000014 $d
     /tmp/cctN395J.s:130    .text.Suspend:0000000000000000 $t
     /tmp/cctN395J.s:137    .text.Suspend:0000000000000000 Suspend
     /tmp/cctN395J.s:272    .text.Suspend:0000000000000078 $d
                            *COM*:0000000000000020 EP
     /tmp/cctN395J.s:279    .text.Resume_Init:0000000000000000 $t
     /tmp/cctN395J.s:286    .text.Resume_Init:0000000000000000 Resume_Init
     /tmp/cctN395J.s:313    .text.Resume_Init:0000000000000014 $d
     /tmp/cctN395J.s:318    .text.Resume:0000000000000000 $t
     /tmp/cctN395J.s:325    .text.Resume:0000000000000000 Resume
     /tmp/cctN395J.s:354    .text.Resume:0000000000000014 $d
     /tmp/cctN395J.s:360    .text.Resume:000000000000001a $t
     /tmp/cctN395J.s:497    .text.Resume:0000000000000098 $d
                            *COM*:0000000000000002 ResumeS
     /tmp/cctN395J.s:519    .bss.remotewakeupon:0000000000000000 remotewakeupon
     /tmp/cctN395J.s:524    .data.fSuspendEnabled:0000000000000000 fSuspendEnabled
     /tmp/cctN395J.s:512    .bss.bDeviceState:0000000000000000 bDeviceState
     /tmp/cctN395J.s:509    .bss.bDeviceState:0000000000000000 $d
     /tmp/cctN395J.s:515    .bss.remotewakeupon:0000000000000000 $d

UNDEFINED SYMBOLS
SetISTR
wInterrupt_Mask
