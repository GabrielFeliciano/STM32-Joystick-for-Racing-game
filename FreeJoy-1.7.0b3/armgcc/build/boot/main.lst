ARM GAS  /tmp/cccxQ8ri.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.EnterProgram,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	EnterProgram:
  24              	.LFB32:
  25              		.file 1 "../bootloader/Src/main.c"
   1:../bootloader/Src/main.c **** /**
   2:../bootloader/Src/main.c ****   ******************************************************************************
   3:../bootloader/Src/main.c ****   * @file           : main.c
   4:../bootloader/Src/main.c ****   * @brief          : Main program body
   5:../bootloader/Src/main.c **** 	
   6:../bootloader/Src/main.c **** 		FreeJoy software for game device controllers
   7:../bootloader/Src/main.c ****     Copyright (C) 2020  Yury Vostrenkov (yuvostrenkov@gmail.com)
   8:../bootloader/Src/main.c **** 
   9:../bootloader/Src/main.c ****     This program is free software: you can redistribute it and/or modify
  10:../bootloader/Src/main.c ****     it under the terms of the GNU General Public License as published by
  11:../bootloader/Src/main.c ****     the Free Software Foundation, either version 3 of the License, or
  12:../bootloader/Src/main.c ****     (at your option) any later version.
  13:../bootloader/Src/main.c **** 
  14:../bootloader/Src/main.c ****     This program is distributed in the hope that it will be useful,
  15:../bootloader/Src/main.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../bootloader/Src/main.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../bootloader/Src/main.c ****     GNU General Public License for more details.
  18:../bootloader/Src/main.c **** 
  19:../bootloader/Src/main.c ****     You should have received a copy of the GNU General Public License
  20:../bootloader/Src/main.c ****     along with this program.  If not, see <https://www.gnu.org/licenses/>.
  21:../bootloader/Src/main.c **** 		
  22:../bootloader/Src/main.c ****   ******************************************************************************
  23:../bootloader/Src/main.c ****   */
  24:../bootloader/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  25:../bootloader/Src/main.c **** 
  26:../bootloader/Src/main.c **** #include "periphery.h"
  27:../bootloader/Src/main.c **** #include "usb_hw.h"
  28:../bootloader/Src/main.c **** 
  29:../bootloader/Src/main.c **** uint16_t magic_word;
  30:../bootloader/Src/main.c **** uint16_t boot1;
  31:../bootloader/Src/main.c **** uint16_t checkUserCode;
  32:../bootloader/Src/main.c **** 
  33:../bootloader/Src/main.c **** /* Private types */
ARM GAS  /tmp/cccxQ8ri.s 			page 2


  34:../bootloader/Src/main.c **** typedef void (*funct_ptr)(void);
  35:../bootloader/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  36:../bootloader/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  37:../bootloader/Src/main.c **** static bool CheckUserCode(uint32_t user_address);
  38:../bootloader/Src/main.c **** 
  39:../bootloader/Src/main.c **** static uint16_t GetMagicWord(void);
  40:../bootloader/Src/main.c **** 
  41:../bootloader/Src/main.c **** static void EnterProgram(void);
  42:../bootloader/Src/main.c **** 
  43:../bootloader/Src/main.c **** /**
  44:../bootloader/Src/main.c ****   * @brief  The application entry point.
  45:../bootloader/Src/main.c ****   *
  46:../bootloader/Src/main.c ****   * @retval None
  47:../bootloader/Src/main.c ****   */
  48:../bootloader/Src/main.c **** int main(void) 
  49:../bootloader/Src/main.c **** {
  50:../bootloader/Src/main.c ****     IO_Init();
  51:../bootloader/Src/main.c ****     Delay(100);
  52:../bootloader/Src/main.c **** 
  53:../bootloader/Src/main.c ****     magic_word = GetMagicWord();
  54:../bootloader/Src/main.c ****     boot1 = READ_BIT(GPIOB->IDR, GPIO_IDR_IDR2);
  55:../bootloader/Src/main.c ****     checkUserCode = CheckUserCode(FIRMWARE_COPY_ADDR);
  56:../bootloader/Src/main.c **** 
  57:../bootloader/Src/main.c ****     if ((magic_word == 0x424C) || boot1 || checkUserCode == 0) 
  58:../bootloader/Src/main.c **** 		{
  59:../bootloader/Src/main.c ****         USB_HW_Init();
  60:../bootloader/Src/main.c ****     } 
  61:../bootloader/Src/main.c **** 		else 
  62:../bootloader/Src/main.c **** 		{
  63:../bootloader/Src/main.c ****         EnterProgram();
  64:../bootloader/Src/main.c ****         // Never reached
  65:../bootloader/Src/main.c ****         while (1);
  66:../bootloader/Src/main.c ****     }
  67:../bootloader/Src/main.c **** 
  68:../bootloader/Src/main.c ****     while (1) 
  69:../bootloader/Src/main.c **** 		{
  70:../bootloader/Src/main.c ****         if (!flash_started) 
  71:../bootloader/Src/main.c **** 				{
  72:../bootloader/Src/main.c ****             LED1_ON;
  73:../bootloader/Src/main.c ****             Delay(500000);
  74:../bootloader/Src/main.c ****             LED1_OFF;
  75:../bootloader/Src/main.c ****             Delay(10000000);
  76:../bootloader/Src/main.c ****         }
  77:../bootloader/Src/main.c ****         if (flash_finished) 
  78:../bootloader/Src/main.c **** 				{
  79:../bootloader/Src/main.c ****             Delay(100000);
  80:../bootloader/Src/main.c ****             USB_Shutdown();
  81:../bootloader/Src/main.c ****             Delay(1000000);
  82:../bootloader/Src/main.c ****             EnterProgram();
  83:../bootloader/Src/main.c ****         }
  84:../bootloader/Src/main.c ****     }
  85:../bootloader/Src/main.c **** }
  86:../bootloader/Src/main.c **** 
  87:../bootloader/Src/main.c **** static bool CheckUserCode(uint32_t user_address) 
  88:../bootloader/Src/main.c **** {
  89:../bootloader/Src/main.c ****     uint32_t sp = *(volatile uint32_t *) user_address;
  90:../bootloader/Src/main.c **** 
ARM GAS  /tmp/cccxQ8ri.s 			page 3


  91:../bootloader/Src/main.c ****     /* Check if the stack pointer in the vector table points
  92:../bootloader/Src/main.c ****        somewhere in SRAM */
  93:../bootloader/Src/main.c ****     return ((sp & 0x2FFE0000) == SRAM_BASE) ? 1 : 0;
  94:../bootloader/Src/main.c **** }
  95:../bootloader/Src/main.c **** 
  96:../bootloader/Src/main.c **** static uint16_t GetMagicWord(void) 
  97:../bootloader/Src/main.c **** {
  98:../bootloader/Src/main.c ****     /* Enable the power and backup interface clocks by setting the
  99:../bootloader/Src/main.c ****      * PWREN and BKPEN bits in the RCC_APB1ENR register
 100:../bootloader/Src/main.c ****      */
 101:../bootloader/Src/main.c ****     SET_BIT(RCC->APB1ENR, RCC_APB1ENR_BKPEN | RCC_APB1ENR_PWREN);
 102:../bootloader/Src/main.c ****     uint16_t value = READ_REG(BKP->DR4);
 103:../bootloader/Src/main.c ****     if (value) 
 104:../bootloader/Src/main.c **** 		{
 105:../bootloader/Src/main.c **** 
 106:../bootloader/Src/main.c ****         /* Enable write access to the backup registers and the
 107:../bootloader/Src/main.c ****          * RTC.
 108:../bootloader/Src/main.c ****          */
 109:../bootloader/Src/main.c ****         SET_BIT(PWR->CR, PWR_CR_DBP);
 110:../bootloader/Src/main.c ****         WRITE_REG(BKP->DR4, 0x0000);
 111:../bootloader/Src/main.c ****         CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 112:../bootloader/Src/main.c ****     }
 113:../bootloader/Src/main.c ****     CLEAR_BIT(RCC->APB1ENR, RCC_APB1ENR_BKPEN | RCC_APB1ENR_PWREN);
 114:../bootloader/Src/main.c **** 
 115:../bootloader/Src/main.c ****     return value;
 116:../bootloader/Src/main.c **** }
 117:../bootloader/Src/main.c **** 
 118:../bootloader/Src/main.c **** /**
 119:../bootloader/Src/main.c ****   * @brief  Jumping to memory address corresponding main program
 120:../bootloader/Src/main.c ****   * @param  None
 121:../bootloader/Src/main.c ****   * @retval None
 122:../bootloader/Src/main.c ****   */
 123:../bootloader/Src/main.c **** static void EnterProgram(void) 
 124:../bootloader/Src/main.c **** {
  26              		.loc 1 124 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 125:../bootloader/Src/main.c ****     funct_ptr Program = (funct_ptr) *(volatile uint32_t *) (FIRMWARE_COPY_ADDR + 0x04);
  31              		.loc 1 125 5 view .LVU1
  32              		.loc 1 125 37 is_stmt 0 view .LVU2
  33 0000 044B     		ldr	r3, .L2
 126:../bootloader/Src/main.c **** 
 127:../bootloader/Src/main.c ****     /* Setup the vector table to the final user-defined one in Flash
 128:../bootloader/Src/main.c ****      * memory
 129:../bootloader/Src/main.c ****      */
 130:../bootloader/Src/main.c ****     WRITE_REG(SCB->VTOR, FIRMWARE_COPY_ADDR);
  34              		.loc 1 130 5 view .LVU3
  35 0002 0549     		ldr	r1, .L2+4
 125:../bootloader/Src/main.c ****     funct_ptr Program = (funct_ptr) *(volatile uint32_t *) (FIRMWARE_COPY_ADDR + 0x04);
  36              		.loc 1 125 37 view .LVU4
  37 0004 1A68     		ldr	r2, [r3]
  38              	.LVL0:
  39              		.loc 1 130 5 is_stmt 1 view .LVU5
  40 0006 043B     		subs	r3, r3, #4
  41 0008 8B60     		str	r3, [r1, #8]
ARM GAS  /tmp/cccxQ8ri.s 			page 4


 131:../bootloader/Src/main.c **** 	
 132:../bootloader/Src/main.c ****     /*
 133:../bootloader/Src/main.c ****      * Setup the stack pointer to the user-defined one
 134:../bootloader/Src/main.c ****      */
 135:../bootloader/Src/main.c **** 		//__set_MSP((*(volatile uint32_t *) FIRMWARE_COPY_ADDR));
 136:../bootloader/Src/main.c **** 		__ASM volatile ("MSR msp, %0" : : "r" ((*(volatile uint32_t *) FIRMWARE_COPY_ADDR)) : );
  42              		.loc 1 136 3 view .LVU6
  43              		.loc 1 136 43 is_stmt 0 view .LVU7
  44 000a 1B68     		ldr	r3, [r3]
  45              		.loc 1 136 3 view .LVU8
  46              		.syntax unified
  47              	@ 136 "../bootloader/Src/main.c" 1
  48 000c 83F30888 		MSR msp, r3
  49              	@ 0 "" 2
 137:../bootloader/Src/main.c **** 	
 138:../bootloader/Src/main.c ****     // Use asm so stack is not used for branch
 139:../bootloader/Src/main.c ****     __ASM volatile("bx %0\n\t"
  50              		.loc 1 139 5 is_stmt 1 view .LVU9
  51              	@ 139 "../bootloader/Src/main.c" 1
  52 0010 1047     		bx r2
  53              		
  54              	@ 0 "" 2
 140:../bootloader/Src/main.c ****     :
 141:../bootloader/Src/main.c ****     : "r" (Program)
 142:../bootloader/Src/main.c ****     :
 143:../bootloader/Src/main.c ****     );
 144:../bootloader/Src/main.c **** }
  55              		.loc 1 144 1 is_stmt 0 view .LVU10
  56              		.thumb
  57              		.syntax unified
  58 0012 7047     		bx	lr
  59              	.L3:
  60              		.align	2
  61              	.L2:
  62 0014 04200008 		.word	134225924
  63 0018 00ED00E0 		.word	-536810240
  64              		.cfi_endproc
  65              	.LFE32:
  67              		.section	.text.startup.main,"ax",%progbits
  68              		.align	1
  69              		.global	main
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu softvfp
  75              	main:
  76              	.LFB29:
  49:../bootloader/Src/main.c ****     IO_Init();
  77              		.loc 1 49 1 is_stmt 1 view -0
  78              		.cfi_startproc
  79              		@ Volatile: function does not return.
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  50:../bootloader/Src/main.c ****     Delay(100);
  82              		.loc 1 50 5 view .LVU12
  49:../bootloader/Src/main.c ****     IO_Init();
  83              		.loc 1 49 1 is_stmt 0 view .LVU13
ARM GAS  /tmp/cccxQ8ri.s 			page 5


  84 0000 80B5     		push	{r7, lr}
  85              	.LCFI0:
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  50:../bootloader/Src/main.c ****     Delay(100);
  89              		.loc 1 50 5 view .LVU14
  90 0002 FFF7FEFF 		bl	IO_Init
  91              	.LVL1:
  51:../bootloader/Src/main.c **** 
  92              		.loc 1 51 5 is_stmt 1 view .LVU15
  93 0006 6420     		movs	r0, #100
  94 0008 FFF7FEFF 		bl	Delay
  95              	.LVL2:
  53:../bootloader/Src/main.c ****     boot1 = READ_BIT(GPIOB->IDR, GPIO_IDR_IDR2);
  96              		.loc 1 53 5 view .LVU16
  97              	.LBB8:
  98              	.LBI8:
  96:../bootloader/Src/main.c **** {
  99              		.loc 1 96 17 view .LVU17
 100              	.LBB9:
 101:../bootloader/Src/main.c ****     uint16_t value = READ_REG(BKP->DR4);
 101              		.loc 1 101 5 view .LVU18
 102 000c 2A4B     		ldr	r3, .L17
 102:../bootloader/Src/main.c ****     if (value) 
 103              		.loc 1 102 14 is_stmt 0 view .LVU19
 104 000e 2B4C     		ldr	r4, .L17+4
 101:../bootloader/Src/main.c ****     uint16_t value = READ_REG(BKP->DR4);
 105              		.loc 1 101 5 view .LVU20
 106 0010 DA69     		ldr	r2, [r3, #28]
 107 0012 42F0C052 		orr	r2, r2, #402653184
 108 0016 DA61     		str	r2, [r3, #28]
 102:../bootloader/Src/main.c ****     if (value) 
 109              		.loc 1 102 5 is_stmt 1 view .LVU21
 102:../bootloader/Src/main.c ****     if (value) 
 110              		.loc 1 102 14 is_stmt 0 view .LVU22
 111 0018 228A     		ldrh	r2, [r4, #16]
 112 001a 92B2     		uxth	r2, r2
 113              	.LVL3:
 103:../bootloader/Src/main.c **** 		{
 114              		.loc 1 103 5 is_stmt 1 view .LVU23
 103:../bootloader/Src/main.c **** 		{
 115              		.loc 1 103 8 is_stmt 0 view .LVU24
 116 001c 52B1     		cbz	r2, .L5
 109:../bootloader/Src/main.c ****         WRITE_REG(BKP->DR4, 0x0000);
 117              		.loc 1 109 9 is_stmt 1 view .LVU25
 118 001e 2849     		ldr	r1, .L17+8
 119 0020 0868     		ldr	r0, [r1]
 120 0022 40F48070 		orr	r0, r0, #256
 121 0026 0860     		str	r0, [r1]
 110:../bootloader/Src/main.c ****         CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 122              		.loc 1 110 9 view .LVU26
 123 0028 0020     		movs	r0, #0
 124 002a 2082     		strh	r0, [r4, #16]	@ movhi
 111:../bootloader/Src/main.c ****     }
 125              		.loc 1 111 9 view .LVU27
 126 002c 0868     		ldr	r0, [r1]
ARM GAS  /tmp/cccxQ8ri.s 			page 6


 127 002e 20F48070 		bic	r0, r0, #256
 128 0032 0860     		str	r0, [r1]
 129              	.L5:
 113:../bootloader/Src/main.c **** 
 130              		.loc 1 113 5 view .LVU28
 131 0034 D969     		ldr	r1, [r3, #28]
 132 0036 21F0C051 		bic	r1, r1, #402653184
 133 003a D961     		str	r1, [r3, #28]
 115:../bootloader/Src/main.c **** }
 134              		.loc 1 115 5 view .LVU29
 135              	.LVL4:
 115:../bootloader/Src/main.c **** }
 136              		.loc 1 115 5 is_stmt 0 view .LVU30
 137              	.LBE9:
 138              	.LBE8:
  53:../bootloader/Src/main.c ****     boot1 = READ_BIT(GPIOB->IDR, GPIO_IDR_IDR2);
 139              		.loc 1 53 16 view .LVU31
 140 003c 214B     		ldr	r3, .L17+12
 141 003e 1A80     		strh	r2, [r3]	@ movhi
  54:../bootloader/Src/main.c ****     checkUserCode = CheckUserCode(FIRMWARE_COPY_ADDR);
 142              		.loc 1 54 5 is_stmt 1 view .LVU32
  54:../bootloader/Src/main.c ****     checkUserCode = CheckUserCode(FIRMWARE_COPY_ADDR);
 143              		.loc 1 54 13 is_stmt 0 view .LVU33
 144 0040 214B     		ldr	r3, .L17+16
 145 0042 9968     		ldr	r1, [r3, #8]
  54:../bootloader/Src/main.c ****     checkUserCode = CheckUserCode(FIRMWARE_COPY_ADDR);
 146              		.loc 1 54 11 view .LVU34
 147 0044 214B     		ldr	r3, .L17+20
  54:../bootloader/Src/main.c ****     checkUserCode = CheckUserCode(FIRMWARE_COPY_ADDR);
 148              		.loc 1 54 13 view .LVU35
 149 0046 01F00401 		and	r1, r1, #4
  54:../bootloader/Src/main.c ****     checkUserCode = CheckUserCode(FIRMWARE_COPY_ADDR);
 150              		.loc 1 54 11 view .LVU36
 151 004a 1980     		strh	r1, [r3]	@ movhi
  55:../bootloader/Src/main.c **** 
 152              		.loc 1 55 5 is_stmt 1 view .LVU37
 153              	.LVL5:
 154              	.LBB10:
 155              	.LBI10:
  87:../bootloader/Src/main.c **** {
 156              		.loc 1 87 13 view .LVU38
 157              	.LBB11:
  89:../bootloader/Src/main.c **** 
 158              		.loc 1 89 5 view .LVU39
  89:../bootloader/Src/main.c **** 
 159              		.loc 1 89 14 is_stmt 0 view .LVU40
 160 004c 204B     		ldr	r3, .L17+24
 161 004e 1868     		ldr	r0, [r3]
 162              	.LVL6:
  93:../bootloader/Src/main.c **** }
 163              		.loc 1 93 5 is_stmt 1 view .LVU41
  93:../bootloader/Src/main.c **** }
 164              		.loc 1 93 17 is_stmt 0 view .LVU42
 165 0050 204B     		ldr	r3, .L17+28
 166 0052 0340     		ands	r3, r3, r0
 167              	.LVL7:
  93:../bootloader/Src/main.c **** }
ARM GAS  /tmp/cccxQ8ri.s 			page 7


 168              		.loc 1 93 49 view .LVU43
 169 0054 03F16040 		add	r0, r3, #-536870912
 170 0058 4442     		rsbs	r4, r0, #0
 171 005a 4441     		adcs	r4, r4, r0
 172              	.LBE11:
 173              	.LBE10:
  55:../bootloader/Src/main.c **** 
 174              		.loc 1 55 19 view .LVU44
 175 005c 1E48     		ldr	r0, .L17+32
 176 005e 0480     		strh	r4, [r0]	@ movhi
  57:../bootloader/Src/main.c **** 		{
 177              		.loc 1 57 5 is_stmt 1 view .LVU45
  57:../bootloader/Src/main.c **** 		{
 178              		.loc 1 57 8 is_stmt 0 view .LVU46
 179 0060 44F24C20 		movw	r0, #16972
 180 0064 8242     		cmp	r2, r0
 181 0066 03D0     		beq	.L6
  57:../bootloader/Src/main.c **** 		{
 182              		.loc 1 57 32 discriminator 1 view .LVU47
 183 0068 11B9     		cbnz	r1, .L6
  57:../bootloader/Src/main.c **** 		{
 184              		.loc 1 57 41 discriminator 2 view .LVU48
 185 006a B3F1005F 		cmp	r3, #536870912
 186 006e 1FD0     		beq	.L7
 187              	.L6:
  59:../bootloader/Src/main.c ****     } 
 188              		.loc 1 59 9 is_stmt 1 view .LVU49
 189 0070 FFF7FEFF 		bl	USB_HW_Init
 190              	.LVL8:
  70:../bootloader/Src/main.c **** 				{
 191              		.loc 1 70 13 is_stmt 0 view .LVU50
 192 0074 194E     		ldr	r6, .L17+36
  72:../bootloader/Src/main.c ****             Delay(500000);
 193              		.loc 1 72 13 view .LVU51
 194 0076 1A4C     		ldr	r4, .L17+40
 195              	.L8:
  73:../bootloader/Src/main.c ****             LED1_OFF;
 196              		.loc 1 73 13 view .LVU52
 197 0078 1A4F     		ldr	r7, .L17+44
 198              	.L11:
  68:../bootloader/Src/main.c **** 		{
 199              		.loc 1 68 5 is_stmt 1 view .LVU53
  70:../bootloader/Src/main.c **** 				{
 200              		.loc 1 70 9 view .LVU54
  70:../bootloader/Src/main.c **** 				{
 201              		.loc 1 70 13 is_stmt 0 view .LVU55
 202 007a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
  70:../bootloader/Src/main.c **** 				{
 203              		.loc 1 70 12 view .LVU56
 204 007c 4BB9     		cbnz	r3, .L10
  72:../bootloader/Src/main.c ****             Delay(500000);
 205              		.loc 1 72 13 is_stmt 1 view .LVU57
 206 007e 4FF40055 		mov	r5, #8192
  73:../bootloader/Src/main.c ****             LED1_OFF;
 207              		.loc 1 73 13 is_stmt 0 view .LVU58
 208 0082 3846     		mov	r0, r7
  72:../bootloader/Src/main.c ****             Delay(500000);
ARM GAS  /tmp/cccxQ8ri.s 			page 8


 209              		.loc 1 72 13 view .LVU59
 210 0084 6561     		str	r5, [r4, #20]
  73:../bootloader/Src/main.c ****             LED1_OFF;
 211              		.loc 1 73 13 is_stmt 1 view .LVU60
 212 0086 FFF7FEFF 		bl	Delay
 213              	.LVL9:
  74:../bootloader/Src/main.c ****             Delay(10000000);
 214              		.loc 1 74 13 view .LVU61
  75:../bootloader/Src/main.c ****         }
 215              		.loc 1 75 13 is_stmt 0 view .LVU62
 216 008a 1748     		ldr	r0, .L17+48
  74:../bootloader/Src/main.c ****             Delay(10000000);
 217              		.loc 1 74 13 view .LVU63
 218 008c 2561     		str	r5, [r4, #16]
  75:../bootloader/Src/main.c ****         }
 219              		.loc 1 75 13 is_stmt 1 view .LVU64
 220 008e FFF7FEFF 		bl	Delay
 221              	.LVL10:
 222              	.L10:
  77:../bootloader/Src/main.c **** 				{
 223              		.loc 1 77 9 view .LVU65
  77:../bootloader/Src/main.c **** 				{
 224              		.loc 1 77 13 is_stmt 0 view .LVU66
 225 0092 164B     		ldr	r3, .L17+52
 226 0094 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  77:../bootloader/Src/main.c **** 				{
 227              		.loc 1 77 12 view .LVU67
 228 0096 002B     		cmp	r3, #0
 229 0098 EFD0     		beq	.L11
  79:../bootloader/Src/main.c ****             USB_Shutdown();
 230              		.loc 1 79 13 is_stmt 1 view .LVU68
 231 009a 1548     		ldr	r0, .L17+56
 232 009c FFF7FEFF 		bl	Delay
 233              	.LVL11:
  80:../bootloader/Src/main.c ****             Delay(1000000);
 234              		.loc 1 80 13 view .LVU69
 235 00a0 FFF7FEFF 		bl	USB_Shutdown
 236              	.LVL12:
  81:../bootloader/Src/main.c ****             EnterProgram();
 237              		.loc 1 81 13 view .LVU70
 238 00a4 1348     		ldr	r0, .L17+60
 239 00a6 FFF7FEFF 		bl	Delay
 240              	.LVL13:
  82:../bootloader/Src/main.c ****         }
 241              		.loc 1 82 13 view .LVU71
 242 00aa FFF7FEFF 		bl	EnterProgram
 243              	.LVL14:
 244 00ae E3E7     		b	.L8
 245              	.L7:
  63:../bootloader/Src/main.c ****         // Never reached
 246              		.loc 1 63 9 view .LVU72
 247 00b0 FFF7FEFF 		bl	EnterProgram
 248              	.LVL15:
 249              	.L9:
  65:../bootloader/Src/main.c ****     }
 250              		.loc 1 65 9 discriminator 1 view .LVU73
  65:../bootloader/Src/main.c ****     }
ARM GAS  /tmp/cccxQ8ri.s 			page 9


 251              		.loc 1 65 18 discriminator 1 view .LVU74
  65:../bootloader/Src/main.c ****     }
 252              		.loc 1 65 15 discriminator 1 view .LVU75
 253 00b4 FEE7     		b	.L9
 254              	.L18:
 255 00b6 00BF     		.align	2
 256              	.L17:
 257 00b8 00100240 		.word	1073876992
 258 00bc 006C0040 		.word	1073769472
 259 00c0 00700040 		.word	1073770496
 260 00c4 00000000 		.word	magic_word
 261 00c8 000C0140 		.word	1073810432
 262 00cc 00000000 		.word	boot1
 263 00d0 00200008 		.word	134225920
 264 00d4 0000FE2F 		.word	805175296
 265 00d8 00000000 		.word	checkUserCode
 266 00dc 00000000 		.word	flash_started
 267 00e0 00100140 		.word	1073811456
 268 00e4 20A10700 		.word	500000
 269 00e8 80969800 		.word	10000000
 270 00ec 00000000 		.word	flash_finished
 271 00f0 A0860100 		.word	100000
 272 00f4 40420F00 		.word	1000000
 273              		.cfi_endproc
 274              	.LFE29:
 276              		.comm	checkUserCode,2,2
 277              		.comm	boot1,2,2
 278              		.comm	magic_word,2,2
 279              		.text
 280              	.Letext0:
 281              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 282              		.file 3 "../Drivers/CMSIS/CM3/CoreSupport/core_cm3.h"
 283              		.file 4 "../Drivers/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h"
 284              		.file 5 "../Drivers/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
 285              		.file 6 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_type.h"
 286              		.file 7 "../bootloader/Inc/usb_hw.h"
 287              		.file 8 "../bootloader/Inc/periphery.h"
ARM GAS  /tmp/cccxQ8ri.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cccxQ8ri.s:16     .text.EnterProgram:0000000000000000 $t
     /tmp/cccxQ8ri.s:23     .text.EnterProgram:0000000000000000 EnterProgram
     /tmp/cccxQ8ri.s:62     .text.EnterProgram:0000000000000014 $d
     /tmp/cccxQ8ri.s:68     .text.startup.main:0000000000000000 $t
     /tmp/cccxQ8ri.s:75     .text.startup.main:0000000000000000 main
     /tmp/cccxQ8ri.s:257    .text.startup.main:00000000000000b8 $d
                            *COM*:0000000000000002 magic_word
                            *COM*:0000000000000002 boot1
                            *COM*:0000000000000002 checkUserCode

UNDEFINED SYMBOLS
IO_Init
Delay
USB_HW_Init
USB_Shutdown
flash_started
flash_finished
