ARM GAS  /tmp/ccaV2J54.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"usb_istr.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.USB_Istr,"ax",%progbits
  16              		.align	1
  17              		.global	USB_Istr
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	USB_Istr:
  25              	.LFB29:
  26              		.file 1 "../bootloader/Src/usb_istr.c"
   1:../bootloader/Src/usb_istr.c **** /**
   2:../bootloader/Src/usb_istr.c ****   ******************************************************************************
   3:../bootloader/Src/usb_istr.c ****   * @file    usb_istr.c
   4:../bootloader/Src/usb_istr.c ****   * @author  MCD Application Team
   5:../bootloader/Src/usb_istr.c ****   * @version V4.1.0
   6:../bootloader/Src/usb_istr.c ****   * @date    26-May-2017
   7:../bootloader/Src/usb_istr.c ****   * @brief   ISTR events interrupt service routines
   8:../bootloader/Src/usb_istr.c ****   ******************************************************************************
   9:../bootloader/Src/usb_istr.c ****   * @attention
  10:../bootloader/Src/usb_istr.c ****   *
  11:../bootloader/Src/usb_istr.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  12:../bootloader/Src/usb_istr.c ****   *
  13:../bootloader/Src/usb_istr.c ****   * Redistribution and use in source and binary forms, with or without modification,
  14:../bootloader/Src/usb_istr.c ****   * are permitted provided that the following conditions are met:
  15:../bootloader/Src/usb_istr.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  16:../bootloader/Src/usb_istr.c ****   *      this list of conditions and the following disclaimer.
  17:../bootloader/Src/usb_istr.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  18:../bootloader/Src/usb_istr.c ****   *      this list of conditions and the following disclaimer in the documentation
  19:../bootloader/Src/usb_istr.c ****   *      and/or other materials provided with the distribution.
  20:../bootloader/Src/usb_istr.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  21:../bootloader/Src/usb_istr.c ****   *      may be used to endorse or promote products derived from this software
  22:../bootloader/Src/usb_istr.c ****   *      without specific prior written permission.
  23:../bootloader/Src/usb_istr.c ****   *
  24:../bootloader/Src/usb_istr.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../bootloader/Src/usb_istr.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../bootloader/Src/usb_istr.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../bootloader/Src/usb_istr.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  28:../bootloader/Src/usb_istr.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  29:../bootloader/Src/usb_istr.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  30:../bootloader/Src/usb_istr.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  31:../bootloader/Src/usb_istr.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  32:../bootloader/Src/usb_istr.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  /tmp/ccaV2J54.s 			page 2


  33:../bootloader/Src/usb_istr.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../bootloader/Src/usb_istr.c ****   *
  35:../bootloader/Src/usb_istr.c ****   ******************************************************************************
  36:../bootloader/Src/usb_istr.c ****   */
  37:../bootloader/Src/usb_istr.c **** 
  38:../bootloader/Src/usb_istr.c **** 
  39:../bootloader/Src/usb_istr.c **** /* Includes ------------------------------------------------------------------*/
  40:../bootloader/Src/usb_istr.c **** #include "usb_lib.h"
  41:../bootloader/Src/usb_istr.c **** #include "usb_prop.h"
  42:../bootloader/Src/usb_istr.c **** #include "usb_pwr.h"
  43:../bootloader/Src/usb_istr.c **** #include "usb_istr.h"
  44:../bootloader/Src/usb_istr.c **** 
  45:../bootloader/Src/usb_istr.c **** /* Private typedef -----------------------------------------------------------*/
  46:../bootloader/Src/usb_istr.c **** /* Private define ------------------------------------------------------------*/
  47:../bootloader/Src/usb_istr.c **** /* Private macro -------------------------------------------------------------*/
  48:../bootloader/Src/usb_istr.c **** /* Private variables ---------------------------------------------------------*/
  49:../bootloader/Src/usb_istr.c **** __IO uint16_t wIstr;  /* ISTR register last read value */
  50:../bootloader/Src/usb_istr.c **** __IO uint8_t bIntPackSOF = 0;  /* SOFs received between 2 consecutive packets */
  51:../bootloader/Src/usb_istr.c **** __IO uint32_t esof_counter =0; /* expected SOF counter */
  52:../bootloader/Src/usb_istr.c **** __IO uint32_t wCNTR=0;
  53:../bootloader/Src/usb_istr.c **** 
  54:../bootloader/Src/usb_istr.c **** /* Extern variables ----------------------------------------------------------*/
  55:../bootloader/Src/usb_istr.c **** /* Private function prototypes -----------------------------------------------*/
  56:../bootloader/Src/usb_istr.c **** /* Private functions ---------------------------------------------------------*/
  57:../bootloader/Src/usb_istr.c **** /* function pointers to non-control endpoints service routines */
  58:../bootloader/Src/usb_istr.c **** void (*pEpInt_IN[7])(void) =
  59:../bootloader/Src/usb_istr.c ****   {
  60:../bootloader/Src/usb_istr.c ****     EP1_IN_Callback,
  61:../bootloader/Src/usb_istr.c ****     EP2_IN_Callback,
  62:../bootloader/Src/usb_istr.c ****     EP3_IN_Callback,
  63:../bootloader/Src/usb_istr.c ****     EP4_IN_Callback,
  64:../bootloader/Src/usb_istr.c ****     EP5_IN_Callback,
  65:../bootloader/Src/usb_istr.c ****     EP6_IN_Callback,
  66:../bootloader/Src/usb_istr.c ****     EP7_IN_Callback,
  67:../bootloader/Src/usb_istr.c ****   };
  68:../bootloader/Src/usb_istr.c **** 
  69:../bootloader/Src/usb_istr.c **** void (*pEpInt_OUT[7])(void) =
  70:../bootloader/Src/usb_istr.c ****   {
  71:../bootloader/Src/usb_istr.c ****     EP1_OUT_Callback,
  72:../bootloader/Src/usb_istr.c ****     EP2_OUT_Callback,
  73:../bootloader/Src/usb_istr.c ****     EP3_OUT_Callback,
  74:../bootloader/Src/usb_istr.c ****     EP4_OUT_Callback,
  75:../bootloader/Src/usb_istr.c ****     EP5_OUT_Callback,
  76:../bootloader/Src/usb_istr.c ****     EP6_OUT_Callback,
  77:../bootloader/Src/usb_istr.c ****     EP7_OUT_Callback,
  78:../bootloader/Src/usb_istr.c ****   };
  79:../bootloader/Src/usb_istr.c **** 
  80:../bootloader/Src/usb_istr.c **** /*******************************************************************************
  81:../bootloader/Src/usb_istr.c **** * Function Name  : USB_Istr
  82:../bootloader/Src/usb_istr.c **** * Description    : ISTR events interrupt service routine
  83:../bootloader/Src/usb_istr.c **** * Input          : None.
  84:../bootloader/Src/usb_istr.c **** * Output         : None.
  85:../bootloader/Src/usb_istr.c **** * Return         : None.
  86:../bootloader/Src/usb_istr.c **** *******************************************************************************/
  87:../bootloader/Src/usb_istr.c **** void USB_Istr(void)
  88:../bootloader/Src/usb_istr.c **** {
  27              		.loc 1 88 1 view -0
ARM GAS  /tmp/ccaV2J54.s 			page 3


  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 32
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  89:../bootloader/Src/usb_istr.c ****     uint32_t i=0;
  31              		.loc 1 89 5 view .LVU1
  32              	.LVL0:
  90:../bootloader/Src/usb_istr.c ****  __IO uint32_t EP[8];
  33              		.loc 1 90 2 view .LVU2
  91:../bootloader/Src/usb_istr.c ****   
  92:../bootloader/Src/usb_istr.c ****   wIstr = _GetISTR();
  34              		.loc 1 92 3 view .LVU3
  88:../bootloader/Src/usb_istr.c ****     uint32_t i=0;
  35              		.loc 1 88 1 is_stmt 0 view .LVU4
  36 0000 70B5     		push	{r4, r5, r6, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 16
  39              		.cfi_offset 4, -16
  40              		.cfi_offset 5, -12
  41              		.cfi_offset 6, -8
  42              		.cfi_offset 14, -4
  43              		.loc 1 92 11 view .LVU5
  44 0002 514C     		ldr	r4, .L35
  45              		.loc 1 92 9 view .LVU6
  46 0004 514D     		ldr	r5, .L35+4
  47              		.loc 1 92 11 view .LVU7
  48 0006 2368     		ldr	r3, [r4]
  93:../bootloader/Src/usb_istr.c **** 
  94:../bootloader/Src/usb_istr.c **** #if (IMR_MSK & ISTR_CTR)
  95:../bootloader/Src/usb_istr.c ****   if (wIstr & ISTR_CTR & wInterrupt_Mask)
  49              		.loc 1 95 24 view .LVU8
  50 0008 514E     		ldr	r6, .L35+8
  92:../bootloader/Src/usb_istr.c **** 
  51              		.loc 1 92 11 view .LVU9
  52 000a 9BB2     		uxth	r3, r3
  92:../bootloader/Src/usb_istr.c **** 
  53              		.loc 1 92 9 view .LVU10
  54 000c 2B80     		strh	r3, [r5]	@ movhi
  55              		.loc 1 95 3 is_stmt 1 view .LVU11
  56              		.loc 1 95 13 is_stmt 0 view .LVU12
  57 000e 2B88     		ldrh	r3, [r5]
  58              		.loc 1 95 6 view .LVU13
  59 0010 3288     		ldrh	r2, [r6]
  88:../bootloader/Src/usb_istr.c ****     uint32_t i=0;
  60              		.loc 1 88 1 view .LVU14
  61 0012 88B0     		sub	sp, sp, #32
  62              	.LCFI1:
  63              		.cfi_def_cfa_offset 48
  64              		.loc 1 95 6 view .LVU15
  65 0014 1340     		ands	r3, r3, r2
  66 0016 1804     		lsls	r0, r3, #16
  67 0018 01D5     		bpl	.L2
  96:../bootloader/Src/usb_istr.c ****   {
  97:../bootloader/Src/usb_istr.c ****     /* servicing of the endpoint correct transfer interrupt */
  98:../bootloader/Src/usb_istr.c ****     /* clear of the CTR flag into the sub */
  99:../bootloader/Src/usb_istr.c ****     CTR_LP();
  68              		.loc 1 99 5 is_stmt 1 view .LVU16
  69 001a FFF7FEFF 		bl	CTR_LP
ARM GAS  /tmp/ccaV2J54.s 			page 4


  70              	.LVL1:
  71              	.L2:
 100:../bootloader/Src/usb_istr.c **** #ifdef CTR_CALLBACK
 101:../bootloader/Src/usb_istr.c ****     CTR_Callback();
 102:../bootloader/Src/usb_istr.c **** #endif
 103:../bootloader/Src/usb_istr.c ****   }
 104:../bootloader/Src/usb_istr.c **** #endif
 105:../bootloader/Src/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
 106:../bootloader/Src/usb_istr.c **** #if (IMR_MSK & ISTR_RESET)
 107:../bootloader/Src/usb_istr.c ****   if (wIstr & ISTR_RESET & wInterrupt_Mask)
  72              		.loc 1 107 3 view .LVU17
  73              		.loc 1 107 13 is_stmt 0 view .LVU18
  74 001e 2B88     		ldrh	r3, [r5]
  75              		.loc 1 107 6 view .LVU19
  76 0020 3288     		ldrh	r2, [r6]
  77 0022 1340     		ands	r3, r3, r2
  78 0024 5905     		lsls	r1, r3, #21
  79 0026 05D5     		bpl	.L3
 108:../bootloader/Src/usb_istr.c ****   {
 109:../bootloader/Src/usb_istr.c ****     _SetISTR((uint16_t)CLR_RESET);
  80              		.loc 1 109 5 is_stmt 1 view .LVU20
  81 0028 4FF6FF33 		movw	r3, #64511
  82 002c 2360     		str	r3, [r4]
 110:../bootloader/Src/usb_istr.c ****     Device_Property.Reset();
  83              		.loc 1 110 5 view .LVU21
  84              		.loc 1 110 20 is_stmt 0 view .LVU22
  85 002e 494B     		ldr	r3, .L35+12
  86              		.loc 1 110 5 view .LVU23
  87 0030 5B68     		ldr	r3, [r3, #4]
  88 0032 9847     		blx	r3
  89              	.LVL2:
  90              	.L3:
 111:../bootloader/Src/usb_istr.c **** #ifdef RESET_CALLBACK
 112:../bootloader/Src/usb_istr.c ****     RESET_Callback();
 113:../bootloader/Src/usb_istr.c **** #endif
 114:../bootloader/Src/usb_istr.c ****   }
 115:../bootloader/Src/usb_istr.c **** #endif
 116:../bootloader/Src/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 117:../bootloader/Src/usb_istr.c **** #if (IMR_MSK & ISTR_DOVR)
 118:../bootloader/Src/usb_istr.c ****   if (wIstr & ISTR_DOVR & wInterrupt_Mask)
 119:../bootloader/Src/usb_istr.c ****   {
 120:../bootloader/Src/usb_istr.c ****     _SetISTR((uint16_t)CLR_DOVR);
 121:../bootloader/Src/usb_istr.c **** #ifdef DOVR_CALLBACK
 122:../bootloader/Src/usb_istr.c ****     DOVR_Callback();
 123:../bootloader/Src/usb_istr.c **** #endif
 124:../bootloader/Src/usb_istr.c ****   }
 125:../bootloader/Src/usb_istr.c **** #endif
 126:../bootloader/Src/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 127:../bootloader/Src/usb_istr.c **** #if (IMR_MSK & ISTR_ERR)
 128:../bootloader/Src/usb_istr.c ****   if (wIstr & ISTR_ERR & wInterrupt_Mask)
  91              		.loc 1 128 3 is_stmt 1 view .LVU24
  92              		.loc 1 128 13 is_stmt 0 view .LVU25
  93 0034 2A88     		ldrh	r2, [r5]
  94              		.loc 1 128 24 view .LVU26
  95 0036 3388     		ldrh	r3, [r6]
  96              		.loc 1 128 6 view .LVU27
  97 0038 1A40     		ands	r2, r2, r3
ARM GAS  /tmp/ccaV2J54.s 			page 5


  98 003a 9204     		lsls	r2, r2, #18
 129:../bootloader/Src/usb_istr.c ****   {
 130:../bootloader/Src/usb_istr.c ****     _SetISTR((uint16_t)CLR_ERR);
  99              		.loc 1 130 5 is_stmt 1 view .LVU28
 100 003c 44BF     		itt	mi
 101 003e 4DF6FF72 		movwmi	r2, #57343
 102 0042 2260     		strmi	r2, [r4]
 131:../bootloader/Src/usb_istr.c **** #ifdef ERR_CALLBACK
 132:../bootloader/Src/usb_istr.c ****     ERR_Callback();
 133:../bootloader/Src/usb_istr.c **** #endif
 134:../bootloader/Src/usb_istr.c ****   }
 135:../bootloader/Src/usb_istr.c **** #endif
 136:../bootloader/Src/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 137:../bootloader/Src/usb_istr.c **** #if (IMR_MSK & ISTR_WKUP)
 138:../bootloader/Src/usb_istr.c ****   if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 103              		.loc 1 138 3 view .LVU29
 104              		.loc 1 138 13 is_stmt 0 view .LVU30
 105 0044 2A88     		ldrh	r2, [r5]
 106              		.loc 1 138 6 view .LVU31
 107 0046 1340     		ands	r3, r3, r2
 108 0048 DB04     		lsls	r3, r3, #19
 109 004a 05D5     		bpl	.L5
 139:../bootloader/Src/usb_istr.c ****   {
 140:../bootloader/Src/usb_istr.c ****     _SetISTR((uint16_t)CLR_WKUP);
 110              		.loc 1 140 5 is_stmt 1 view .LVU32
 111 004c 4EF6FF73 		movw	r3, #61439
 141:../bootloader/Src/usb_istr.c ****     Resume(RESUME_EXTERNAL);
 112              		.loc 1 141 5 is_stmt 0 view .LVU33
 113 0050 0020     		movs	r0, #0
 140:../bootloader/Src/usb_istr.c ****     Resume(RESUME_EXTERNAL);
 114              		.loc 1 140 5 view .LVU34
 115 0052 2360     		str	r3, [r4]
 116              		.loc 1 141 5 is_stmt 1 view .LVU35
 117 0054 FFF7FEFF 		bl	Resume
 118              	.LVL3:
 119              	.L5:
 142:../bootloader/Src/usb_istr.c **** #ifdef WKUP_CALLBACK
 143:../bootloader/Src/usb_istr.c ****     WKUP_Callback();
 144:../bootloader/Src/usb_istr.c **** #endif
 145:../bootloader/Src/usb_istr.c ****   }
 146:../bootloader/Src/usb_istr.c **** #endif
 147:../bootloader/Src/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 148:../bootloader/Src/usb_istr.c **** #if (IMR_MSK & ISTR_SUSP)
 149:../bootloader/Src/usb_istr.c ****   if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 120              		.loc 1 149 3 view .LVU36
 121              		.loc 1 149 13 is_stmt 0 view .LVU37
 122 0058 2B88     		ldrh	r3, [r5]
 123              		.loc 1 149 6 view .LVU38
 124 005a 3288     		ldrh	r2, [r6]
 125 005c 1340     		ands	r3, r3, r2
 126 005e 1805     		lsls	r0, r3, #20
 127 0060 08D5     		bpl	.L6
 150:../bootloader/Src/usb_istr.c ****   {
 151:../bootloader/Src/usb_istr.c **** 
 152:../bootloader/Src/usb_istr.c ****     /* check if SUSPEND is possible */
 153:../bootloader/Src/usb_istr.c ****     if (fSuspendEnabled)
 128              		.loc 1 153 5 is_stmt 1 view .LVU39
ARM GAS  /tmp/ccaV2J54.s 			page 6


 129              		.loc 1 153 9 is_stmt 0 view .LVU40
 130 0062 3D4B     		ldr	r3, .L35+16
 131 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 132              		.loc 1 153 8 view .LVU41
 133 0066 002B     		cmp	r3, #0
 134 0068 68D0     		beq	.L7
 154:../bootloader/Src/usb_istr.c ****     {
 155:../bootloader/Src/usb_istr.c ****       Suspend();
 135              		.loc 1 155 7 is_stmt 1 view .LVU42
 136 006a FFF7FEFF 		bl	Suspend
 137              	.LVL4:
 138              	.L8:
 156:../bootloader/Src/usb_istr.c ****     }
 157:../bootloader/Src/usb_istr.c ****     else
 158:../bootloader/Src/usb_istr.c ****     {
 159:../bootloader/Src/usb_istr.c ****       /* if not possible then resume after xx ms */
 160:../bootloader/Src/usb_istr.c ****       Resume(RESUME_LATER);
 161:../bootloader/Src/usb_istr.c ****     }
 162:../bootloader/Src/usb_istr.c ****     /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
 163:../bootloader/Src/usb_istr.c ****     _SetISTR((uint16_t)CLR_SUSP);
 139              		.loc 1 163 5 view .LVU43
 140 006e 4FF2FF73 		movw	r3, #63487
 141 0072 2360     		str	r3, [r4]
 142              	.L6:
 164:../bootloader/Src/usb_istr.c **** #ifdef SUSP_CALLBACK
 165:../bootloader/Src/usb_istr.c ****     SUSP_Callback();
 166:../bootloader/Src/usb_istr.c **** #endif
 167:../bootloader/Src/usb_istr.c ****   }
 168:../bootloader/Src/usb_istr.c **** #endif
 169:../bootloader/Src/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 170:../bootloader/Src/usb_istr.c **** #if (IMR_MSK & ISTR_SOF)
 171:../bootloader/Src/usb_istr.c ****   if (wIstr & ISTR_SOF & wInterrupt_Mask)
 143              		.loc 1 171 3 view .LVU44
 144              		.loc 1 171 13 is_stmt 0 view .LVU45
 145 0074 2B88     		ldrh	r3, [r5]
 146              		.loc 1 171 24 view .LVU46
 147 0076 3288     		ldrh	r2, [r6]
 148              		.loc 1 171 6 view .LVU47
 149 0078 1340     		ands	r3, r3, r2
 150 007a 9905     		lsls	r1, r3, #22
 151 007c 07D5     		bpl	.L9
 172:../bootloader/Src/usb_istr.c ****   {
 173:../bootloader/Src/usb_istr.c ****     _SetISTR((uint16_t)CLR_SOF);
 152              		.loc 1 173 5 is_stmt 1 view .LVU48
 153 007e 4FF6FF53 		movw	r3, #65023
 174:../bootloader/Src/usb_istr.c ****     bIntPackSOF++;
 154              		.loc 1 174 16 is_stmt 0 view .LVU49
 155 0082 3649     		ldr	r1, .L35+20
 173:../bootloader/Src/usb_istr.c ****     bIntPackSOF++;
 156              		.loc 1 173 5 view .LVU50
 157 0084 2360     		str	r3, [r4]
 158              		.loc 1 174 5 is_stmt 1 view .LVU51
 159              		.loc 1 174 16 is_stmt 0 view .LVU52
 160 0086 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 161 0088 0133     		adds	r3, r3, #1
 162 008a DBB2     		uxtb	r3, r3
 163 008c 0B70     		strb	r3, [r1]
ARM GAS  /tmp/ccaV2J54.s 			page 7


 164              	.L9:
 175:../bootloader/Src/usb_istr.c **** 
 176:../bootloader/Src/usb_istr.c **** #ifdef SOF_CALLBACK
 177:../bootloader/Src/usb_istr.c ****     SOF_Callback();
 178:../bootloader/Src/usb_istr.c **** #endif
 179:../bootloader/Src/usb_istr.c ****   }
 180:../bootloader/Src/usb_istr.c **** #endif
 181:../bootloader/Src/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 182:../bootloader/Src/usb_istr.c **** #if (IMR_MSK & ISTR_ESOF)
 183:../bootloader/Src/usb_istr.c ****   if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 165              		.loc 1 183 3 is_stmt 1 view .LVU53
 166              		.loc 1 183 13 is_stmt 0 view .LVU54
 167 008e 2B88     		ldrh	r3, [r5]
 168              		.loc 1 183 6 view .LVU55
 169 0090 1A40     		ands	r2, r2, r3
 170 0092 D205     		lsls	r2, r2, #23
 171 0094 56D5     		bpl	.L1
 184:../bootloader/Src/usb_istr.c ****   {
 185:../bootloader/Src/usb_istr.c ****     /* clear ESOF flag in ISTR */
 186:../bootloader/Src/usb_istr.c ****     _SetISTR((uint16_t)CLR_ESOF);
 172              		.loc 1 186 5 is_stmt 1 view .LVU56
 173 0096 4FF6FF63 		movw	r3, #65279
 174 009a 2360     		str	r3, [r4]
 187:../bootloader/Src/usb_istr.c ****     
 188:../bootloader/Src/usb_istr.c ****     if ((_GetFNR()&FNR_RXDP)!=0)
 175              		.loc 1 188 5 view .LVU57
 176              		.loc 1 188 10 is_stmt 0 view .LVU58
 177 009c 304B     		ldr	r3, .L35+24
 178 009e 3148     		ldr	r0, .L35+28
 179 00a0 1B68     		ldr	r3, [r3]
 180              		.loc 1 188 8 view .LVU59
 181 00a2 13F4004F 		tst	r3, #32768
 182 00a6 41D0     		beq	.L11
 189:../bootloader/Src/usb_istr.c ****     {
 190:../bootloader/Src/usb_istr.c ****       /* increment ESOF counter */
 191:../bootloader/Src/usb_istr.c ****       esof_counter ++;
 183              		.loc 1 191 7 is_stmt 1 view .LVU60
 184              		.loc 1 191 20 is_stmt 0 view .LVU61
 185 00a8 0368     		ldr	r3, [r0]
 186 00aa 0133     		adds	r3, r3, #1
 187 00ac 0360     		str	r3, [r0]
 192:../bootloader/Src/usb_istr.c ****       
 193:../bootloader/Src/usb_istr.c ****       /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing S
 194:../bootloader/Src/usb_istr.c ****       if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 188              		.loc 1 194 7 is_stmt 1 view .LVU62
 189              		.loc 1 194 25 is_stmt 0 view .LVU63
 190 00ae 0368     		ldr	r3, [r0]
 191              		.loc 1 194 10 view .LVU64
 192 00b0 032B     		cmp	r3, #3
 193 00b2 3DD9     		bls	.L12
 194              		.loc 1 194 32 discriminator 1 view .LVU65
 195 00b4 2C49     		ldr	r1, .L35+32
 196 00b6 0A68     		ldr	r2, [r1]
 197              		.loc 1 194 28 discriminator 1 view .LVU66
 198 00b8 12F00802 		ands	r2, r2, #8
 199 00bc 38D1     		bne	.L12
 195:../bootloader/Src/usb_istr.c ****       {           
ARM GAS  /tmp/ccaV2J54.s 			page 8


 196:../bootloader/Src/usb_istr.c ****         /* this a sequence to apply a force RESET*/
 197:../bootloader/Src/usb_istr.c ****       
 198:../bootloader/Src/usb_istr.c ****         /*Store CNTR value */
 199:../bootloader/Src/usb_istr.c ****         wCNTR = _GetCNTR(); 
 200              		.loc 1 199 9 is_stmt 1 view .LVU67
 201              		.loc 1 199 17 is_stmt 0 view .LVU68
 202 00be 0D68     		ldr	r5, [r1]
 203              		.loc 1 199 15 view .LVU69
 204 00c0 2A4B     		ldr	r3, .L35+36
 205 00c2 ADB2     		uxth	r5, r5
 206 00c4 1D60     		str	r5, [r3]
 200:../bootloader/Src/usb_istr.c ****       
 201:../bootloader/Src/usb_istr.c ****         /*Store endpoints registers status */
 202:../bootloader/Src/usb_istr.c ****         for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 207              		.loc 1 202 9 is_stmt 1 view .LVU70
 208              		.loc 1 202 18 view .LVU71
 209              	.LVL5:
 210              	.L13:
 211              		.loc 1 202 27 discriminator 3 view .LVU72
 212 00c6 9500     		lsls	r5, r2, #2
 213 00c8 05F18046 		add	r6, r5, #1073741824
 214 00cc 06F5B846 		add	r6, r6, #23552
 215              		.loc 1 202 35 is_stmt 0 discriminator 3 view .LVU73
 216 00d0 3668     		ldr	r6, [r6]
 217              		.loc 1 202 33 discriminator 3 view .LVU74
 218 00d2 0DF1200C 		add	ip, sp, #32
 219              		.loc 1 202 23 discriminator 3 view .LVU75
 220 00d6 0132     		adds	r2, r2, #1
 221              	.LVL6:
 222              		.loc 1 202 23 discriminator 3 view .LVU76
 223 00d8 B6B2     		uxth	r6, r6
 224              		.loc 1 202 33 discriminator 3 view .LVU77
 225 00da 6544     		add	r5, r5, ip
 226              		.loc 1 202 9 discriminator 3 view .LVU78
 227 00dc 082A     		cmp	r2, #8
 228              		.loc 1 202 33 discriminator 3 view .LVU79
 229 00de 45F8206C 		str	r6, [r5, #-32]
 230              		.loc 1 202 22 is_stmt 1 discriminator 3 view .LVU80
 231              	.LVL7:
 232              		.loc 1 202 18 discriminator 3 view .LVU81
 233              		.loc 1 202 9 is_stmt 0 discriminator 3 view .LVU82
 234 00e2 F0D1     		bne	.L13
 203:../bootloader/Src/usb_istr.c ****       
 204:../bootloader/Src/usb_istr.c ****         /*apply FRES */
 205:../bootloader/Src/usb_istr.c ****         wCNTR|=CNTR_FRES;
 235              		.loc 1 205 9 is_stmt 1 view .LVU83
 236              		.loc 1 205 14 is_stmt 0 view .LVU84
 237 00e4 1A68     		ldr	r2, [r3]
 238              	.LVL8:
 239              		.loc 1 205 14 view .LVU85
 240 00e6 42F00102 		orr	r2, r2, #1
 241 00ea 1A60     		str	r2, [r3]
 206:../bootloader/Src/usb_istr.c ****         _SetCNTR(wCNTR);
 242              		.loc 1 206 9 is_stmt 1 view .LVU86
 243 00ec 1A68     		ldr	r2, [r3]
 244 00ee 92B2     		uxth	r2, r2
 245 00f0 0A60     		str	r2, [r1]
ARM GAS  /tmp/ccaV2J54.s 			page 9


 207:../bootloader/Src/usb_istr.c ****  
 208:../bootloader/Src/usb_istr.c ****         /*clear FRES*/
 209:../bootloader/Src/usb_istr.c ****         wCNTR&=~CNTR_FRES;
 246              		.loc 1 209 9 view .LVU87
 247              		.loc 1 209 14 is_stmt 0 view .LVU88
 248 00f2 1A68     		ldr	r2, [r3]
 249 00f4 22F00102 		bic	r2, r2, #1
 250 00f8 1A60     		str	r2, [r3]
 210:../bootloader/Src/usb_istr.c ****         _SetCNTR(wCNTR);
 251              		.loc 1 210 9 is_stmt 1 view .LVU89
 252 00fa 1B68     		ldr	r3, [r3]
 253 00fc 9BB2     		uxth	r3, r3
 254 00fe 0B60     		str	r3, [r1]
 211:../bootloader/Src/usb_istr.c ****       
 212:../bootloader/Src/usb_istr.c ****         /*poll for RESET flag in ISTR*/
 213:../bootloader/Src/usb_istr.c ****         while((_GetISTR()&ISTR_RESET) == 0);
 255              		.loc 1 213 9 view .LVU90
 256              	.L14:
 257              		.loc 1 213 44 discriminator 1 view .LVU91
 258              		.loc 1 213 14 discriminator 1 view .LVU92
 259              		.loc 1 213 16 is_stmt 0 discriminator 1 view .LVU93
 260 0100 2368     		ldr	r3, [r4]
 261              		.loc 1 213 14 discriminator 1 view .LVU94
 262 0102 5B05     		lsls	r3, r3, #21
 263 0104 FCD5     		bpl	.L14
 214:../bootloader/Src/usb_istr.c ****   
 215:../bootloader/Src/usb_istr.c ****         /* clear RESET flag in ISTR */
 216:../bootloader/Src/usb_istr.c ****         _SetISTR((uint16_t)CLR_RESET);
 264              		.loc 1 216 9 is_stmt 1 view .LVU95
 265 0106 4FF6FF33 		movw	r3, #64511
 266 010a 2360     		str	r3, [r4]
 217:../bootloader/Src/usb_istr.c ****    
 218:../bootloader/Src/usb_istr.c ****        /*restore Enpoints*/
 219:../bootloader/Src/usb_istr.c ****         for (i=0;i<8;i++)
 267              		.loc 1 219 9 view .LVU96
 268              	.LVL9:
 269              		.loc 1 219 18 view .LVU97
 270              		.loc 1 219 15 is_stmt 0 view .LVU98
 271 010c 0023     		movs	r3, #0
 272              	.LVL10:
 273              	.L15:
 220:../bootloader/Src/usb_istr.c ****         _SetENDPOINT(i, EP[i]);
 274              		.loc 1 220 9 is_stmt 1 discriminator 3 view .LVU99
 275 010e 08A9     		add	r1, sp, #32
 276 0110 01EB8301 		add	r1, r1, r3, lsl #2
 277 0114 51F8201C 		ldr	r1, [r1, #-32]
 278 0118 9A00     		lsls	r2, r3, #2
 279 011a 02F18042 		add	r2, r2, #1073741824
 219:../bootloader/Src/usb_istr.c ****         _SetENDPOINT(i, EP[i]);
 280              		.loc 1 219 23 is_stmt 0 discriminator 3 view .LVU100
 281 011e 0133     		adds	r3, r3, #1
 282              	.LVL11:
 219:../bootloader/Src/usb_istr.c ****         _SetENDPOINT(i, EP[i]);
 283              		.loc 1 219 23 discriminator 3 view .LVU101
 284 0120 02F5B842 		add	r2, r2, #23552
 285 0124 89B2     		uxth	r1, r1
 219:../bootloader/Src/usb_istr.c ****         _SetENDPOINT(i, EP[i]);
ARM GAS  /tmp/ccaV2J54.s 			page 10


 286              		.loc 1 219 9 discriminator 3 view .LVU102
 287 0126 082B     		cmp	r3, #8
 288              		.loc 1 220 9 discriminator 3 view .LVU103
 289 0128 1160     		str	r1, [r2]
 219:../bootloader/Src/usb_istr.c ****         _SetENDPOINT(i, EP[i]);
 290              		.loc 1 219 22 is_stmt 1 discriminator 3 view .LVU104
 291              	.LVL12:
 219:../bootloader/Src/usb_istr.c ****         _SetENDPOINT(i, EP[i]);
 292              		.loc 1 219 18 discriminator 3 view .LVU105
 219:../bootloader/Src/usb_istr.c ****         _SetENDPOINT(i, EP[i]);
 293              		.loc 1 219 9 is_stmt 0 discriminator 3 view .LVU106
 294 012a F0D1     		bne	.L15
 295              	.LVL13:
 296              	.L11:
 221:../bootloader/Src/usb_istr.c ****       
 222:../bootloader/Src/usb_istr.c ****         esof_counter = 0;
 223:../bootloader/Src/usb_istr.c ****       }
 224:../bootloader/Src/usb_istr.c ****     }
 225:../bootloader/Src/usb_istr.c ****     else
 226:../bootloader/Src/usb_istr.c ****     {
 227:../bootloader/Src/usb_istr.c ****         esof_counter = 0;
 297              		.loc 1 227 9 is_stmt 1 view .LVU107
 298              		.loc 1 227 22 is_stmt 0 view .LVU108
 299 012c 0023     		movs	r3, #0
 300 012e 0360     		str	r3, [r0]
 301              	.L12:
 228:../bootloader/Src/usb_istr.c ****     }
 229:../bootloader/Src/usb_istr.c ****     
 230:../bootloader/Src/usb_istr.c ****     /* resume handling timing is made with ESOFs */
 231:../bootloader/Src/usb_istr.c ****     Resume(RESUME_ESOF); /* request without change of the machine state */
 302              		.loc 1 231 5 is_stmt 1 view .LVU109
 303 0130 0720     		movs	r0, #7
 232:../bootloader/Src/usb_istr.c **** 
 233:../bootloader/Src/usb_istr.c **** #ifdef ESOF_CALLBACK
 234:../bootloader/Src/usb_istr.c ****     ESOF_Callback();
 235:../bootloader/Src/usb_istr.c **** #endif
 236:../bootloader/Src/usb_istr.c ****   }
 237:../bootloader/Src/usb_istr.c **** #endif
 238:../bootloader/Src/usb_istr.c **** } /* USB_Istr */
 304              		.loc 1 238 1 is_stmt 0 view .LVU110
 305 0132 08B0     		add	sp, sp, #32
 306              	.LCFI2:
 307              		.cfi_remember_state
 308              		.cfi_def_cfa_offset 16
 309              		@ sp needed
 310 0134 BDE87040 		pop	{r4, r5, r6, lr}
 311              	.LCFI3:
 312              		.cfi_restore 14
 313              		.cfi_restore 6
 314              		.cfi_restore 5
 315              		.cfi_restore 4
 316              		.cfi_def_cfa_offset 0
 231:../bootloader/Src/usb_istr.c **** 
 317              		.loc 1 231 5 view .LVU111
 318 0138 FFF7FEBF 		b	Resume
 319              	.LVL14:
 320              	.L7:
ARM GAS  /tmp/ccaV2J54.s 			page 11


 321              	.LCFI4:
 322              		.cfi_restore_state
 160:../bootloader/Src/usb_istr.c ****     }
 323              		.loc 1 160 7 is_stmt 1 view .LVU112
 324 013c 0220     		movs	r0, #2
 325 013e FFF7FEFF 		bl	Resume
 326              	.LVL15:
 327 0142 94E7     		b	.L8
 328              	.L1:
 329              		.loc 1 238 1 is_stmt 0 view .LVU113
 330 0144 08B0     		add	sp, sp, #32
 331              	.LCFI5:
 332              		.cfi_def_cfa_offset 16
 333              		@ sp needed
 334 0146 70BD     		pop	{r4, r5, r6, pc}
 335              	.L36:
 336              		.align	2
 337              	.L35:
 338 0148 445C0040 		.word	1073765444
 339 014c 00000000 		.word	wIstr
 340 0150 00000000 		.word	wInterrupt_Mask
 341 0154 00000000 		.word	Device_Property
 342 0158 00000000 		.word	fSuspendEnabled
 343 015c 00000000 		.word	.LANCHOR0
 344 0160 485C0040 		.word	1073765448
 345 0164 00000000 		.word	.LANCHOR1
 346 0168 405C0040 		.word	1073765440
 347 016c 00000000 		.word	.LANCHOR2
 348              		.cfi_endproc
 349              	.LFE29:
 351              		.global	pEpInt_OUT
 352              		.global	pEpInt_IN
 353              		.global	wCNTR
 354              		.global	esof_counter
 355              		.global	bIntPackSOF
 356              		.comm	wIstr,2,2
 357              		.section	.bss.bIntPackSOF,"aw",%nobits
 358              		.set	.LANCHOR0,. + 0
 361              	bIntPackSOF:
 362 0000 00       		.space	1
 363              		.section	.bss.esof_counter,"aw",%nobits
 364              		.align	2
 365              		.set	.LANCHOR1,. + 0
 368              	esof_counter:
 369 0000 00000000 		.space	4
 370              		.section	.bss.wCNTR,"aw",%nobits
 371              		.align	2
 372              		.set	.LANCHOR2,. + 0
 375              	wCNTR:
 376 0000 00000000 		.space	4
 377              		.section	.data.pEpInt_IN,"aw"
 378              		.align	2
 381              	pEpInt_IN:
 382 0000 00000000 		.word	EP1_IN_Callback
 383 0004 00000000 		.word	NOP_Process
 384 0008 00000000 		.word	NOP_Process
 385 000c 00000000 		.word	NOP_Process
ARM GAS  /tmp/ccaV2J54.s 			page 12


 386 0010 00000000 		.word	NOP_Process
 387 0014 00000000 		.word	NOP_Process
 388 0018 00000000 		.word	NOP_Process
 389              		.section	.data.pEpInt_OUT,"aw"
 390              		.align	2
 393              	pEpInt_OUT:
 394 0000 00000000 		.word	EP1_OUT_Callback
 395 0004 00000000 		.word	NOP_Process
 396 0008 00000000 		.word	NOP_Process
 397 000c 00000000 		.word	NOP_Process
 398 0010 00000000 		.word	NOP_Process
 399 0014 00000000 		.word	NOP_Process
 400 0018 00000000 		.word	NOP_Process
 401              		.text
 402              	.Letext0:
 403              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 404              		.file 3 "../Drivers/CMSIS/CM3/CoreSupport/core_cm3.h"
 405              		.file 4 "../Drivers/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h"
 406              		.file 5 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_type.h"
 407              		.file 6 "../bootloader/Inc/usb_hw.h"
 408              		.file 7 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_regs.h"
 409              		.file 8 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_core.h"
 410              		.file 9 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_init.h"
 411              		.file 10 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_lib.h"
 412              		.file 11 "../bootloader/Inc/usb_pwr.h"
 413              		.file 12 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_int.h"
ARM GAS  /tmp/ccaV2J54.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_istr.c
     /tmp/ccaV2J54.s:16     .text.USB_Istr:0000000000000000 $t
     /tmp/ccaV2J54.s:24     .text.USB_Istr:0000000000000000 USB_Istr
     /tmp/ccaV2J54.s:338    .text.USB_Istr:0000000000000148 $d
                            *COM*:0000000000000002 wIstr
     /tmp/ccaV2J54.s:393    .data.pEpInt_OUT:0000000000000000 pEpInt_OUT
     /tmp/ccaV2J54.s:381    .data.pEpInt_IN:0000000000000000 pEpInt_IN
     /tmp/ccaV2J54.s:375    .bss.wCNTR:0000000000000000 wCNTR
     /tmp/ccaV2J54.s:368    .bss.esof_counter:0000000000000000 esof_counter
     /tmp/ccaV2J54.s:361    .bss.bIntPackSOF:0000000000000000 bIntPackSOF
     /tmp/ccaV2J54.s:362    .bss.bIntPackSOF:0000000000000000 $d
     /tmp/ccaV2J54.s:364    .bss.esof_counter:0000000000000000 $d
     /tmp/ccaV2J54.s:371    .bss.wCNTR:0000000000000000 $d
     /tmp/ccaV2J54.s:378    .data.pEpInt_IN:0000000000000000 $d
     /tmp/ccaV2J54.s:390    .data.pEpInt_OUT:0000000000000000 $d

UNDEFINED SYMBOLS
CTR_LP
Resume
Suspend
wInterrupt_Mask
Device_Property
fSuspendEnabled
EP1_IN_Callback
NOP_Process
EP1_OUT_Callback
