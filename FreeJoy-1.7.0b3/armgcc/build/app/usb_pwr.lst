ARM GAS  /tmp/ccX1Gi0T.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"usb_pwr.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.PowerOn,"ax",%progbits
  16              		.align	1
  17              		.p2align 2,,3
  18              		.global	PowerOn
  19              		.arch armv7-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu softvfp
  25              	PowerOn:
  26              	.LFB29:
  27              		.file 1 "../application/Src/usb_pwr.c"
   1:../application/Src/usb_pwr.c **** /**
   2:../application/Src/usb_pwr.c ****   ******************************************************************************
   3:../application/Src/usb_pwr.c ****   * @file    usb_pwr.c
   4:../application/Src/usb_pwr.c ****   * @author  MCD Application Team
   5:../application/Src/usb_pwr.c ****   * @version V4.1.0
   6:../application/Src/usb_pwr.c ****   * @date    26-May-2017
   7:../application/Src/usb_pwr.c ****   * @brief   Connection/disconnection & power management
   8:../application/Src/usb_pwr.c ****   ******************************************************************************
   9:../application/Src/usb_pwr.c ****   * @attention
  10:../application/Src/usb_pwr.c ****   *
  11:../application/Src/usb_pwr.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  12:../application/Src/usb_pwr.c ****   *
  13:../application/Src/usb_pwr.c ****   * Redistribution and use in source and binary forms, with or without modification,
  14:../application/Src/usb_pwr.c ****   * are permitted provided that the following conditions are met:
  15:../application/Src/usb_pwr.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  16:../application/Src/usb_pwr.c ****   *      this list of conditions and the following disclaimer.
  17:../application/Src/usb_pwr.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  18:../application/Src/usb_pwr.c ****   *      this list of conditions and the following disclaimer in the documentation
  19:../application/Src/usb_pwr.c ****   *      and/or other materials provided with the distribution.
  20:../application/Src/usb_pwr.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  21:../application/Src/usb_pwr.c ****   *      may be used to endorse or promote products derived from this software
  22:../application/Src/usb_pwr.c ****   *      without specific prior written permission.
  23:../application/Src/usb_pwr.c ****   *
  24:../application/Src/usb_pwr.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../application/Src/usb_pwr.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../application/Src/usb_pwr.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../application/Src/usb_pwr.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  28:../application/Src/usb_pwr.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  29:../application/Src/usb_pwr.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  30:../application/Src/usb_pwr.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  31:../application/Src/usb_pwr.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
ARM GAS  /tmp/ccX1Gi0T.s 			page 2


  32:../application/Src/usb_pwr.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  33:../application/Src/usb_pwr.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../application/Src/usb_pwr.c ****   *
  35:../application/Src/usb_pwr.c ****   ******************************************************************************
  36:../application/Src/usb_pwr.c ****   */
  37:../application/Src/usb_pwr.c **** 
  38:../application/Src/usb_pwr.c **** 
  39:../application/Src/usb_pwr.c **** /* Includes ------------------------------------------------------------------*/
  40:../application/Src/usb_pwr.c **** #include "usb_lib.h"
  41:../application/Src/usb_pwr.c **** #include "usb_pwr.h"
  42:../application/Src/usb_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  43:../application/Src/usb_pwr.c **** /* Private define ------------------------------------------------------------*/
  44:../application/Src/usb_pwr.c **** /* Private macro -------------------------------------------------------------*/
  45:../application/Src/usb_pwr.c **** /* Private variables ---------------------------------------------------------*/
  46:../application/Src/usb_pwr.c **** __IO uint32_t bDeviceState = UNCONNECTED; /* USB device status */
  47:../application/Src/usb_pwr.c **** __IO bool fSuspendEnabled = TRUE;  /* true when suspend is possible */
  48:../application/Src/usb_pwr.c **** __IO uint32_t EP[8];
  49:../application/Src/usb_pwr.c **** 
  50:../application/Src/usb_pwr.c **** struct
  51:../application/Src/usb_pwr.c **** {
  52:../application/Src/usb_pwr.c ****   __IO RESUME_STATE eState;
  53:../application/Src/usb_pwr.c ****   __IO uint8_t bESOFcnt;
  54:../application/Src/usb_pwr.c **** }
  55:../application/Src/usb_pwr.c **** ResumeS;
  56:../application/Src/usb_pwr.c **** 
  57:../application/Src/usb_pwr.c **** __IO uint32_t remotewakeupon=0;
  58:../application/Src/usb_pwr.c **** 
  59:../application/Src/usb_pwr.c **** /* Extern variables ----------------------------------------------------------*/
  60:../application/Src/usb_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  61:../application/Src/usb_pwr.c **** /* Extern function prototypes ------------------------------------------------*/
  62:../application/Src/usb_pwr.c **** /* Private functions ---------------------------------------------------------*/
  63:../application/Src/usb_pwr.c **** 
  64:../application/Src/usb_pwr.c **** /**
  65:../application/Src/usb_pwr.c ****   * Function Name  : PowerOn
  66:../application/Src/usb_pwr.c ****   * Description    :
  67:../application/Src/usb_pwr.c ****   * Input          : None.
  68:../application/Src/usb_pwr.c ****   * Output         : None.
  69:../application/Src/usb_pwr.c ****   * Return         : USB_SUCCESS.
  70:../application/Src/usb_pwr.c ****   */
  71:../application/Src/usb_pwr.c **** RESULT PowerOn(void)
  72:../application/Src/usb_pwr.c **** {
  28              		.loc 1 72 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  73:../application/Src/usb_pwr.c ****   uint16_t wRegVal;
  32              		.loc 1 73 3 view .LVU1
  74:../application/Src/usb_pwr.c ****   
  75:../application/Src/usb_pwr.c **** 
  76:../application/Src/usb_pwr.c ****   /*** CNTR_PWDN = 0 ***/
  77:../application/Src/usb_pwr.c ****   wRegVal = CNTR_FRES;
  33              		.loc 1 77 3 view .LVU2
  34              	.LVL0:
  78:../application/Src/usb_pwr.c ****   _SetCNTR(wRegVal);
  35              		.loc 1 78 3 view .LVU3
  72:../application/Src/usb_pwr.c ****   uint16_t wRegVal;
  36              		.loc 1 72 1 is_stmt 0 view .LVU4
ARM GAS  /tmp/ccX1Gi0T.s 			page 3


  37 0000 70B5     		push	{r4, r5, r6, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 16
  40              		.cfi_offset 4, -16
  41              		.cfi_offset 5, -12
  42              		.cfi_offset 6, -8
  43              		.cfi_offset 14, -4
  44              		.loc 1 78 3 view .LVU5
  45 0002 0122     		movs	r2, #1
  79:../application/Src/usb_pwr.c **** 
  80:../application/Src/usb_pwr.c ****   /* The following sequence is recommended:
  81:../application/Src/usb_pwr.c ****     1- FRES = 0
  82:../application/Src/usb_pwr.c ****     2- Wait until RESET flag = 1 (polling)
  83:../application/Src/usb_pwr.c ****     3- clear ISTR register */
  84:../application/Src/usb_pwr.c **** 
  85:../application/Src/usb_pwr.c ****   /*** CNTR_FRES = 0 ***/
  86:../application/Src/usb_pwr.c ****   wInterrupt_Mask = 0;
  46              		.loc 1 86 19 view .LVU6
  47 0004 0024     		movs	r4, #0
  78:../application/Src/usb_pwr.c **** 
  48              		.loc 1 78 3 view .LVU7
  49 0006 084D     		ldr	r5, .L4
  50              		.loc 1 86 19 view .LVU8
  51 0008 084E     		ldr	r6, .L4+4
  87:../application/Src/usb_pwr.c ****   
  88:../application/Src/usb_pwr.c ****   _SetCNTR(wInterrupt_Mask);
  89:../application/Src/usb_pwr.c ****   
  90:../application/Src/usb_pwr.c ****   /* Wait until RESET flag = 1 (polling) */
  91:../application/Src/usb_pwr.c ****   while((_GetISTR()&ISTR_RESET) == 1);
  52              		.loc 1 91 10 view .LVU9
  53 000a 094B     		ldr	r3, .L4+8
  78:../application/Src/usb_pwr.c **** 
  54              		.loc 1 78 3 view .LVU10
  55 000c 2A60     		str	r2, [r5]
  86:../application/Src/usb_pwr.c ****   
  56              		.loc 1 86 3 is_stmt 1 view .LVU11
  92:../application/Src/usb_pwr.c ****   
  93:../application/Src/usb_pwr.c ****   /*** Clear pending interrupts ***/
  94:../application/Src/usb_pwr.c ****   SetISTR(0);
  57              		.loc 1 94 3 is_stmt 0 view .LVU12
  58 000e 2046     		mov	r0, r4
  86:../application/Src/usb_pwr.c ****   
  59              		.loc 1 86 19 view .LVU13
  60 0010 3480     		strh	r4, [r6]	@ movhi
  88:../application/Src/usb_pwr.c ****   
  61              		.loc 1 88 3 is_stmt 1 view .LVU14
  62 0012 2C60     		str	r4, [r5]
  91:../application/Src/usb_pwr.c ****   
  63              		.loc 1 91 3 view .LVU15
  91:../application/Src/usb_pwr.c ****   
  64              		.loc 1 91 38 view .LVU16
  91:../application/Src/usb_pwr.c ****   
  65              		.loc 1 91 8 view .LVU17
  91:../application/Src/usb_pwr.c ****   
  66              		.loc 1 91 10 is_stmt 0 view .LVU18
  67 0014 1B68     		ldr	r3, [r3]
  68              		.loc 1 94 3 is_stmt 1 view .LVU19
ARM GAS  /tmp/ccX1Gi0T.s 			page 4


  69 0016 FFF7FEFF 		bl	SetISTR
  70              	.LVL1:
  95:../application/Src/usb_pwr.c ****   
  96:../application/Src/usb_pwr.c ****   /*** Set interrupt mask ***/
  97:../application/Src/usb_pwr.c ****   wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  71              		.loc 1 97 3 view .LVU20
  72              		.loc 1 97 19 is_stmt 0 view .LVU21
  73 001a 4FF4E053 		mov	r3, #7168
  98:../application/Src/usb_pwr.c ****   _SetCNTR(wInterrupt_Mask);
  99:../application/Src/usb_pwr.c ****   
 100:../application/Src/usb_pwr.c ****   return USB_SUCCESS;
 101:../application/Src/usb_pwr.c **** }
  74              		.loc 1 101 1 view .LVU22
  75 001e 2046     		mov	r0, r4
  97:../application/Src/usb_pwr.c ****   _SetCNTR(wInterrupt_Mask);
  76              		.loc 1 97 19 view .LVU23
  77 0020 3380     		strh	r3, [r6]	@ movhi
  98:../application/Src/usb_pwr.c ****   _SetCNTR(wInterrupt_Mask);
  78              		.loc 1 98 3 is_stmt 1 view .LVU24
  79 0022 2B60     		str	r3, [r5]
 100:../application/Src/usb_pwr.c **** }
  80              		.loc 1 100 3 view .LVU25
  81              		.loc 1 101 1 is_stmt 0 view .LVU26
  82 0024 70BD     		pop	{r4, r5, r6, pc}
  83              	.L5:
  84 0026 00BF     		.align	2
  85              	.L4:
  86 0028 405C0040 		.word	1073765440
  87 002c 00000000 		.word	wInterrupt_Mask
  88 0030 445C0040 		.word	1073765444
  89              		.cfi_endproc
  90              	.LFE29:
  92              		.section	.text.PowerOff,"ax",%progbits
  93              		.align	1
  94              		.p2align 2,,3
  95              		.global	PowerOff
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
  99              		.fpu softvfp
 101              	PowerOff:
 102              	.LFB30:
 102:../application/Src/usb_pwr.c **** 
 103:../application/Src/usb_pwr.c **** /**
 104:../application/Src/usb_pwr.c ****   * Function Name  : PowerOff
 105:../application/Src/usb_pwr.c ****   * Description    : handles switch-off conditions
 106:../application/Src/usb_pwr.c ****   * Input          : None.
 107:../application/Src/usb_pwr.c ****   * Output         : None.
 108:../application/Src/usb_pwr.c ****   * Return         : USB_SUCCESS.
 109:../application/Src/usb_pwr.c ****   **/
 110:../application/Src/usb_pwr.c **** RESULT PowerOff()
 111:../application/Src/usb_pwr.c **** {
 103              		.loc 1 111 1 is_stmt 1 view -0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              		@ link register save eliminated.
ARM GAS  /tmp/ccX1Gi0T.s 			page 5


 112:../application/Src/usb_pwr.c ****   /* disable all interrupts and force USB reset */
 113:../application/Src/usb_pwr.c ****   _SetCNTR(CNTR_FRES);
 108              		.loc 1 113 3 view .LVU28
 111:../application/Src/usb_pwr.c ****   /* disable all interrupts and force USB reset */
 109              		.loc 1 111 1 is_stmt 0 view .LVU29
 110 0000 10B4     		push	{r4}
 111              	.LCFI1:
 112              		.cfi_def_cfa_offset 4
 113              		.cfi_offset 4, -4
 114:../application/Src/usb_pwr.c ****   
 115:../application/Src/usb_pwr.c ****   /* clear interrupt status register */
 116:../application/Src/usb_pwr.c ****   _SetISTR(0);
 114              		.loc 1 116 3 view .LVU30
 115 0002 0020     		movs	r0, #0
 113:../application/Src/usb_pwr.c ****   
 116              		.loc 1 113 3 view .LVU31
 117 0004 0124     		movs	r4, #1
 117:../application/Src/usb_pwr.c ****   
 118:../application/Src/usb_pwr.c ****   /* switch-off device */
 119:../application/Src/usb_pwr.c ****   _SetCNTR(CNTR_FRES + CNTR_PDWN);
 118              		.loc 1 119 3 view .LVU32
 119 0006 0322     		movs	r2, #3
 113:../application/Src/usb_pwr.c ****   
 120              		.loc 1 113 3 view .LVU33
 121 0008 034B     		ldr	r3, .L8
 116:../application/Src/usb_pwr.c ****   
 122              		.loc 1 116 3 view .LVU34
 123 000a 0449     		ldr	r1, .L8+4
 113:../application/Src/usb_pwr.c ****   
 124              		.loc 1 113 3 view .LVU35
 125 000c 1C60     		str	r4, [r3]
 116:../application/Src/usb_pwr.c ****   
 126              		.loc 1 116 3 is_stmt 1 view .LVU36
 127 000e 0860     		str	r0, [r1]
 128              		.loc 1 119 3 view .LVU37
 120:../application/Src/usb_pwr.c ****   /* sw variables reset */
 121:../application/Src/usb_pwr.c ****   /* ... */
 122:../application/Src/usb_pwr.c **** 
 123:../application/Src/usb_pwr.c ****   return USB_SUCCESS;
 124:../application/Src/usb_pwr.c **** }
 129              		.loc 1 124 1 is_stmt 0 view .LVU38
 130 0010 10BC     		pop	{r4}
 131              	.LCFI2:
 132              		.cfi_restore 4
 133              		.cfi_def_cfa_offset 0
 119:../application/Src/usb_pwr.c ****   /* sw variables reset */
 134              		.loc 1 119 3 view .LVU39
 135 0012 1A60     		str	r2, [r3]
 123:../application/Src/usb_pwr.c **** }
 136              		.loc 1 123 3 is_stmt 1 view .LVU40
 137              		.loc 1 124 1 is_stmt 0 view .LVU41
 138 0014 7047     		bx	lr
 139              	.L9:
 140 0016 00BF     		.align	2
 141              	.L8:
 142 0018 405C0040 		.word	1073765440
 143 001c 445C0040 		.word	1073765444
ARM GAS  /tmp/ccX1Gi0T.s 			page 6


 144              		.cfi_endproc
 145              	.LFE30:
 147              		.section	.text.Suspend,"ax",%progbits
 148              		.align	1
 149              		.p2align 2,,3
 150              		.global	Suspend
 151              		.syntax unified
 152              		.thumb
 153              		.thumb_func
 154              		.fpu softvfp
 156              	Suspend:
 157              	.LFB31:
 125:../application/Src/usb_pwr.c **** 
 126:../application/Src/usb_pwr.c **** /**
 127:../application/Src/usb_pwr.c ****   * Function Name  : Suspend
 128:../application/Src/usb_pwr.c ****   * Description    : sets suspend mode operating conditions
 129:../application/Src/usb_pwr.c ****   * Input          : None.
 130:../application/Src/usb_pwr.c ****   * Output         : None.
 131:../application/Src/usb_pwr.c ****   * Return         : USB_SUCCESS.
 132:../application/Src/usb_pwr.c ****   */
 133:../application/Src/usb_pwr.c **** void Suspend(void)
 134:../application/Src/usb_pwr.c **** {
 158              		.loc 1 134 1 is_stmt 1 view -0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 135:../application/Src/usb_pwr.c ****   uint32_t i =0;
 163              		.loc 1 135 3 view .LVU43
 164              	.LVL2:
 136:../application/Src/usb_pwr.c ****   uint16_t wCNTR;
 165              		.loc 1 136 3 view .LVU44
 137:../application/Src/usb_pwr.c **** #ifdef USB_LOW_PWR_MGMT_SUPPORT
 138:../application/Src/usb_pwr.c ****   uint32_t tmpreg = 0;
 139:../application/Src/usb_pwr.c ****   __IO uint32_t savePWR_CR=0;
 140:../application/Src/usb_pwr.c **** #endif
 141:../application/Src/usb_pwr.c **** 
 142:../application/Src/usb_pwr.c ****   
 143:../application/Src/usb_pwr.c ****   /* suspend preparation */
 144:../application/Src/usb_pwr.c ****   /* ... */
 145:../application/Src/usb_pwr.c ****   
 146:../application/Src/usb_pwr.c ****   /*Store CNTR value */
 147:../application/Src/usb_pwr.c ****   wCNTR = _GetCNTR();  
 166              		.loc 1 147 3 view .LVU45
 167              		.loc 1 147 11 is_stmt 0 view .LVU46
 168 0000 2B48     		ldr	r0, .L15
 148:../application/Src/usb_pwr.c ****   
 149:../application/Src/usb_pwr.c ****   /* This a sequence to apply a force RESET to handle a robustness case */
 150:../application/Src/usb_pwr.c ****   
 151:../application/Src/usb_pwr.c ****   /*Store endpoints registers status */
 152:../application/Src/usb_pwr.c ****   for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 169              		.loc 1 152 29 view .LVU47
 170 0002 2C4A     		ldr	r2, .L15+4
 147:../application/Src/usb_pwr.c ****   
 171              		.loc 1 147 11 view .LVU48
 172 0004 0368     		ldr	r3, [r0]
 173              		.loc 1 152 29 view .LVU49
ARM GAS  /tmp/ccX1Gi0T.s 			page 7


 174 0006 1168     		ldr	r1, [r2]
 175              		.loc 1 152 27 view .LVU50
 176 0008 2B4A     		ldr	r2, .L15+8
 134:../application/Src/usb_pwr.c ****   uint32_t i =0;
 177              		.loc 1 134 1 view .LVU51
 178 000a 70B4     		push	{r4, r5, r6}
 179              	.LCFI3:
 180              		.cfi_def_cfa_offset 12
 181              		.cfi_offset 4, -12
 182              		.cfi_offset 5, -8
 183              		.cfi_offset 6, -4
 184 000c 89B2     		uxth	r1, r1
 185              		.loc 1 152 29 view .LVU52
 186 000e 2B4C     		ldr	r4, .L15+12
 187              		.loc 1 152 27 view .LVU53
 188 0010 1160     		str	r1, [r2]
 189              		.loc 1 152 29 view .LVU54
 190 0012 2168     		ldr	r1, [r4]
 147:../application/Src/usb_pwr.c ****   
 191              		.loc 1 147 9 view .LVU55
 192 0014 9BB2     		uxth	r3, r3
 193              	.LVL3:
 194              		.loc 1 152 3 is_stmt 1 view .LVU56
 195              		.loc 1 152 12 view .LVU57
 196              		.loc 1 152 21 view .LVU58
 197              		.loc 1 152 16 view .LVU59
 198              		.loc 1 152 12 view .LVU60
 199              		.loc 1 152 21 view .LVU61
 200              		.loc 1 152 16 view .LVU62
 201              		.loc 1 152 12 view .LVU63
 202              		.loc 1 152 21 view .LVU64
 203              		.loc 1 152 16 view .LVU65
 204              		.loc 1 152 12 view .LVU66
 205              		.loc 1 152 21 view .LVU67
 206              		.loc 1 152 16 view .LVU68
 207              		.loc 1 152 12 view .LVU69
 208              		.loc 1 152 21 view .LVU70
 209              		.loc 1 152 16 view .LVU71
 210              		.loc 1 152 12 view .LVU72
 211              		.loc 1 152 21 view .LVU73
 212              		.loc 1 152 16 view .LVU74
 213              		.loc 1 152 12 view .LVU75
 214              		.loc 1 152 21 view .LVU76
 215              		.loc 1 152 16 view .LVU77
 216              		.loc 1 152 12 view .LVU78
 217              		.loc 1 152 21 view .LVU79
 218 0016 89B2     		uxth	r1, r1
 219              		.loc 1 152 27 is_stmt 0 view .LVU80
 220 0018 5160     		str	r1, [r2, #4]
 221              		.loc 1 152 29 view .LVU81
 222 001a 6168     		ldr	r1, [r4, #4]
 153:../application/Src/usb_pwr.c ****   
 154:../application/Src/usb_pwr.c ****   /* unmask RESET flag */
 155:../application/Src/usb_pwr.c ****   wCNTR|=CNTR_RESETM;
 156:../application/Src/usb_pwr.c ****   _SetCNTR(wCNTR);
 157:../application/Src/usb_pwr.c ****   
 158:../application/Src/usb_pwr.c ****   /*apply FRES */
ARM GAS  /tmp/ccX1Gi0T.s 			page 8


 159:../application/Src/usb_pwr.c ****   wCNTR|=CNTR_FRES;
 160:../application/Src/usb_pwr.c ****   _SetCNTR(wCNTR);
 223              		.loc 1 160 3 view .LVU82
 224 001c 43F48065 		orr	r5, r3, #1024
 225 0020 89B2     		uxth	r1, r1
 152:../application/Src/usb_pwr.c ****   
 226              		.loc 1 152 27 view .LVU83
 227 0022 9160     		str	r1, [r2, #8]
 152:../application/Src/usb_pwr.c ****   
 228              		.loc 1 152 29 view .LVU84
 229 0024 A168     		ldr	r1, [r4, #8]
 230 0026 89B2     		uxth	r1, r1
 152:../application/Src/usb_pwr.c ****   
 231              		.loc 1 152 27 view .LVU85
 232 0028 D160     		str	r1, [r2, #12]
 152:../application/Src/usb_pwr.c ****   
 233              		.loc 1 152 29 view .LVU86
 234 002a E168     		ldr	r1, [r4, #12]
 235 002c 89B2     		uxth	r1, r1
 152:../application/Src/usb_pwr.c ****   
 236              		.loc 1 152 27 view .LVU87
 237 002e 1161     		str	r1, [r2, #16]
 152:../application/Src/usb_pwr.c ****   
 238              		.loc 1 152 29 view .LVU88
 239 0030 2169     		ldr	r1, [r4, #16]
 240 0032 89B2     		uxth	r1, r1
 152:../application/Src/usb_pwr.c ****   
 241              		.loc 1 152 27 view .LVU89
 242 0034 5161     		str	r1, [r2, #20]
 152:../application/Src/usb_pwr.c ****   
 243              		.loc 1 152 29 view .LVU90
 244 0036 6169     		ldr	r1, [r4, #20]
 245 0038 89B2     		uxth	r1, r1
 152:../application/Src/usb_pwr.c ****   
 246              		.loc 1 152 27 view .LVU91
 247 003a 9161     		str	r1, [r2, #24]
 152:../application/Src/usb_pwr.c ****   
 248              		.loc 1 152 29 view .LVU92
 249 003c A169     		ldr	r1, [r4, #24]
 250 003e 23F00104 		bic	r4, r3, #1
 156:../application/Src/usb_pwr.c ****   
 251              		.loc 1 156 3 view .LVU93
 252 0042 2B46     		mov	r3, r5
 253              	.LVL4:
 156:../application/Src/usb_pwr.c ****   
 254              		.loc 1 156 3 view .LVU94
 255 0044 89B2     		uxth	r1, r1
 152:../application/Src/usb_pwr.c ****   
 256              		.loc 1 152 27 view .LVU95
 257 0046 D161     		str	r1, [r2, #28]
 152:../application/Src/usb_pwr.c ****   
 258              		.loc 1 152 16 is_stmt 1 view .LVU96
 259              	.LVL5:
 152:../application/Src/usb_pwr.c ****   
 260              		.loc 1 152 12 view .LVU97
 155:../application/Src/usb_pwr.c ****   _SetCNTR(wCNTR);
 261              		.loc 1 155 3 view .LVU98
ARM GAS  /tmp/ccX1Gi0T.s 			page 9


 156:../application/Src/usb_pwr.c ****   
 262              		.loc 1 156 3 view .LVU99
 161:../application/Src/usb_pwr.c ****   
 162:../application/Src/usb_pwr.c ****   /*clear FRES*/
 163:../application/Src/usb_pwr.c ****   wCNTR&=~CNTR_FRES;
 164:../application/Src/usb_pwr.c ****   _SetCNTR(wCNTR);
 263              		.loc 1 164 3 is_stmt 0 view .LVU100
 264 0048 44F48066 		orr	r6, r4, #1024
 160:../application/Src/usb_pwr.c ****   
 265              		.loc 1 160 3 view .LVU101
 266 004c 45F00105 		orr	r5, r5, #1
 165:../application/Src/usb_pwr.c ****   
 166:../application/Src/usb_pwr.c ****   /*poll for RESET flag in ISTR*/
 167:../application/Src/usb_pwr.c ****   while((_GetISTR()&ISTR_RESET) == 0);
 267              		.loc 1 167 10 view .LVU102
 268 0050 1B49     		ldr	r1, .L15+16
 156:../application/Src/usb_pwr.c ****   
 269              		.loc 1 156 3 view .LVU103
 270 0052 0360     		str	r3, [r0]
 159:../application/Src/usb_pwr.c ****   _SetCNTR(wCNTR);
 271              		.loc 1 159 3 is_stmt 1 view .LVU104
 160:../application/Src/usb_pwr.c ****   
 272              		.loc 1 160 3 view .LVU105
 273 0054 A4B2     		uxth	r4, r4
 274 0056 0560     		str	r5, [r0]
 163:../application/Src/usb_pwr.c ****   _SetCNTR(wCNTR);
 275              		.loc 1 163 3 view .LVU106
 276              	.LVL6:
 164:../application/Src/usb_pwr.c ****   
 277              		.loc 1 164 3 view .LVU107
 278 0058 0660     		str	r6, [r0]
 279              		.loc 1 167 3 view .LVU108
 280              	.L11:
 281              		.loc 1 167 38 discriminator 1 view .LVU109
 282              		.loc 1 167 8 discriminator 1 view .LVU110
 283              		.loc 1 167 10 is_stmt 0 discriminator 1 view .LVU111
 284 005a 0B68     		ldr	r3, [r1]
 285              		.loc 1 167 8 discriminator 1 view .LVU112
 286 005c 5B05     		lsls	r3, r3, #21
 287 005e FCD5     		bpl	.L11
 168:../application/Src/usb_pwr.c ****   
 169:../application/Src/usb_pwr.c ****   /* clear RESET flag in ISTR */
 170:../application/Src/usb_pwr.c ****   _SetISTR((uint16_t)CLR_RESET);
 288              		.loc 1 170 3 is_stmt 1 view .LVU113
 289 0060 4FF6FF33 		movw	r3, #64511
 290 0064 0B60     		str	r3, [r1]
 171:../application/Src/usb_pwr.c ****   
 172:../application/Src/usb_pwr.c ****   /*restore Enpoints*/
 173:../application/Src/usb_pwr.c ****   for (i=0;i<8;i++)
 291              		.loc 1 173 3 view .LVU114
 292              	.LVL7:
 293              		.loc 1 173 12 view .LVU115
 174:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 294              		.loc 1 174 5 view .LVU116
 295 0066 1368     		ldr	r3, [r2]
 296 0068 1249     		ldr	r1, .L15+4
 297 006a 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccX1Gi0T.s 			page 10


 298 006c 0B60     		str	r3, [r1]
 173:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 299              		.loc 1 173 16 view .LVU117
 300              	.LVL8:
 173:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 301              		.loc 1 173 12 view .LVU118
 302              		.loc 1 174 5 view .LVU119
 303 006e 5368     		ldr	r3, [r2, #4]
 304 0070 1448     		ldr	r0, .L15+20
 305 0072 9BB2     		uxth	r3, r3
 306 0074 4B60     		str	r3, [r1, #4]
 173:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 307              		.loc 1 173 16 view .LVU120
 308              	.LVL9:
 173:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 309              		.loc 1 173 12 view .LVU121
 310              		.loc 1 174 5 view .LVU122
 311 0076 9368     		ldr	r3, [r2, #8]
 175:../application/Src/usb_pwr.c ****   
 176:../application/Src/usb_pwr.c ****   /* Now it is safe to enter macrocell in suspend mode */
 177:../application/Src/usb_pwr.c ****   wCNTR |= CNTR_FSUSP;
 178:../application/Src/usb_pwr.c ****   _SetCNTR(wCNTR);
 312              		.loc 1 178 3 is_stmt 0 view .LVU123
 313 0078 44F48164 		orr	r4, r4, #1032
 314              	.LVL10:
 315              		.loc 1 178 3 view .LVU124
 316 007c 9BB2     		uxth	r3, r3
 174:../application/Src/usb_pwr.c ****   
 317              		.loc 1 174 5 view .LVU125
 318 007e 8B60     		str	r3, [r1, #8]
 173:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 319              		.loc 1 173 16 is_stmt 1 view .LVU126
 320              	.LVL11:
 173:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 321              		.loc 1 173 12 view .LVU127
 174:../application/Src/usb_pwr.c ****   
 322              		.loc 1 174 5 view .LVU128
 323 0080 D368     		ldr	r3, [r2, #12]
 324 0082 9BB2     		uxth	r3, r3
 325 0084 CB60     		str	r3, [r1, #12]
 173:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 326              		.loc 1 173 16 view .LVU129
 327              	.LVL12:
 173:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 328              		.loc 1 173 12 view .LVU130
 174:../application/Src/usb_pwr.c ****   
 329              		.loc 1 174 5 view .LVU131
 330 0086 1369     		ldr	r3, [r2, #16]
 331 0088 9BB2     		uxth	r3, r3
 332 008a 0B61     		str	r3, [r1, #16]
 173:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 333              		.loc 1 173 16 view .LVU132
 334              	.LVL13:
 173:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 335              		.loc 1 173 12 view .LVU133
 174:../application/Src/usb_pwr.c ****   
 336              		.loc 1 174 5 view .LVU134
ARM GAS  /tmp/ccX1Gi0T.s 			page 11


 337 008c 5369     		ldr	r3, [r2, #20]
 338 008e 9BB2     		uxth	r3, r3
 339 0090 4B61     		str	r3, [r1, #20]
 173:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 340              		.loc 1 173 16 view .LVU135
 341              	.LVL14:
 173:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 342              		.loc 1 173 12 view .LVU136
 174:../application/Src/usb_pwr.c ****   
 343              		.loc 1 174 5 view .LVU137
 344 0092 9369     		ldr	r3, [r2, #24]
 345 0094 9BB2     		uxth	r3, r3
 346 0096 8B61     		str	r3, [r1, #24]
 173:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 347              		.loc 1 173 16 view .LVU138
 348              	.LVL15:
 173:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 349              		.loc 1 173 12 view .LVU139
 174:../application/Src/usb_pwr.c ****   
 350              		.loc 1 174 5 view .LVU140
 351 0098 D169     		ldr	r1, [r2, #28]
 352              		.loc 1 178 3 is_stmt 0 view .LVU141
 353 009a 054A     		ldr	r2, .L15
 354 009c 89B2     		uxth	r1, r1
 174:../application/Src/usb_pwr.c ****   
 355              		.loc 1 174 5 view .LVU142
 356 009e 0160     		str	r1, [r0]
 173:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 357              		.loc 1 173 16 is_stmt 1 view .LVU143
 358              	.LVL16:
 173:../application/Src/usb_pwr.c ****     _SetENDPOINT(i, EP[i]);
 359              		.loc 1 173 12 view .LVU144
 177:../application/Src/usb_pwr.c ****   _SetCNTR(wCNTR);
 360              		.loc 1 177 3 view .LVU145
 361              		.loc 1 178 3 view .LVU146
 362 00a0 1460     		str	r4, [r2]
 179:../application/Src/usb_pwr.c ****   
 180:../application/Src/usb_pwr.c ****   /* force low-power mode in the macrocell */
 181:../application/Src/usb_pwr.c ****   wCNTR = _GetCNTR();
 363              		.loc 1 181 3 view .LVU147
 364              		.loc 1 181 11 is_stmt 0 view .LVU148
 365 00a2 1368     		ldr	r3, [r2]
 182:../application/Src/usb_pwr.c ****   wCNTR |= CNTR_LPMODE;
 183:../application/Src/usb_pwr.c ****   _SetCNTR(wCNTR);
 184:../application/Src/usb_pwr.c ****   
 185:../application/Src/usb_pwr.c **** #ifdef USB_LOW_PWR_MGMT_SUPPORT
 186:../application/Src/usb_pwr.c ****   /*prepare entry in low power mode (STOP mode)*/
 187:../application/Src/usb_pwr.c ****   /* Select the regulator state in STOP mode*/
 188:../application/Src/usb_pwr.c ****   savePWR_CR = PWR->CR;
 189:../application/Src/usb_pwr.c ****   tmpreg = PWR->CR;
 190:../application/Src/usb_pwr.c ****   /* Clear PDDS and LPDS bits */
 191:../application/Src/usb_pwr.c ****   tmpreg &= ((uint32_t)0xFFFFFFFC);
 192:../application/Src/usb_pwr.c ****   /* Set LPDS bit according to PWR_Regulator value */
 193:../application/Src/usb_pwr.c ****   tmpreg |= PWR_Regulator_LowPower;
 194:../application/Src/usb_pwr.c ****   /* Store the new value */
 195:../application/Src/usb_pwr.c ****   PWR->CR = tmpreg;
 196:../application/Src/usb_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
ARM GAS  /tmp/ccX1Gi0T.s 			page 12


 197:../application/Src/usb_pwr.c **** #if defined(STM32F303xE) || defined(STM32F303xC) || defined (STM32F37X)
 198:../application/Src/usb_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 199:../application/Src/usb_pwr.c **** #else
 200:../application/Src/usb_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP;       
 201:../application/Src/usb_pwr.c **** #endif
 202:../application/Src/usb_pwr.c ****   
 203:../application/Src/usb_pwr.c ****   /* enter system in STOP mode, only when wakeup flag in not set */
 204:../application/Src/usb_pwr.c ****   if((_GetISTR()&ISTR_WKUP)==0)
 205:../application/Src/usb_pwr.c ****   {
 206:../application/Src/usb_pwr.c ****     __WFI();
 207:../application/Src/usb_pwr.c ****     /* Reset SLEEPDEEP bit of Cortex System Control Register */
 208:../application/Src/usb_pwr.c **** #if defined(STM32F303xE) || defined(STM32F303xC) || defined (STM32F37X)
 209:../application/Src/usb_pwr.c ****     SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
 210:../application/Src/usb_pwr.c **** #else
 211:../application/Src/usb_pwr.c ****     SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 212:../application/Src/usb_pwr.c **** #endif
 213:../application/Src/usb_pwr.c ****   }
 214:../application/Src/usb_pwr.c ****   else
 215:../application/Src/usb_pwr.c ****   {
 216:../application/Src/usb_pwr.c ****     /* Clear Wakeup flag */
 217:../application/Src/usb_pwr.c ****     _SetISTR(CLR_WKUP);
 218:../application/Src/usb_pwr.c ****     /* clear FSUSP to abort entry in suspend mode  */
 219:../application/Src/usb_pwr.c ****     wCNTR = _GetCNTR();
 220:../application/Src/usb_pwr.c ****     wCNTR&=~CNTR_FSUSP;
 221:../application/Src/usb_pwr.c ****     _SetCNTR(wCNTR);
 222:../application/Src/usb_pwr.c ****     
 223:../application/Src/usb_pwr.c ****     /*restore sleep mode configuration */ 
 224:../application/Src/usb_pwr.c ****     /* restore Power regulator config in sleep mode*/
 225:../application/Src/usb_pwr.c ****     PWR->CR = savePWR_CR;
 226:../application/Src/usb_pwr.c ****     
 227:../application/Src/usb_pwr.c ****     /* Reset SLEEPDEEP bit of Cortex System Control Register */
 228:../application/Src/usb_pwr.c **** #if defined(STM32F303xE) || defined(STM32F303xC) || defined (STM32F37X)
 229:../application/Src/usb_pwr.c ****     SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 230:../application/Src/usb_pwr.c **** #else
 231:../application/Src/usb_pwr.c ****     SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 232:../application/Src/usb_pwr.c **** #endif
 233:../application/Src/usb_pwr.c ****   }
 234:../application/Src/usb_pwr.c **** #endif /* USB_LOW_PWR_MGMT_SUPPORT */
 235:../application/Src/usb_pwr.c **** }
 366              		.loc 1 235 1 view .LVU149
 367 00a4 70BC     		pop	{r4, r5, r6}
 368              	.LCFI4:
 369              		.cfi_restore 6
 370              		.cfi_restore 5
 371              		.cfi_restore 4
 372              		.cfi_def_cfa_offset 0
 181:../application/Src/usb_pwr.c ****   wCNTR |= CNTR_LPMODE;
 373              		.loc 1 181 9 view .LVU150
 374 00a6 9BB2     		uxth	r3, r3
 375              	.LVL17:
 182:../application/Src/usb_pwr.c ****   wCNTR |= CNTR_LPMODE;
 376              		.loc 1 182 3 is_stmt 1 view .LVU151
 183:../application/Src/usb_pwr.c ****   
 377              		.loc 1 183 3 view .LVU152
 378 00a8 43F00403 		orr	r3, r3, #4
 379              	.LVL18:
 183:../application/Src/usb_pwr.c ****   
ARM GAS  /tmp/ccX1Gi0T.s 			page 13


 380              		.loc 1 183 3 is_stmt 0 view .LVU153
 381 00ac 1360     		str	r3, [r2]
 382              		.loc 1 235 1 view .LVU154
 383 00ae 7047     		bx	lr
 384              	.L16:
 385              		.align	2
 386              	.L15:
 387 00b0 405C0040 		.word	1073765440
 388 00b4 005C0040 		.word	1073765376
 389 00b8 00000000 		.word	EP
 390 00bc 045C0040 		.word	1073765380
 391 00c0 445C0040 		.word	1073765444
 392 00c4 1C5C0040 		.word	1073765404
 393              		.cfi_endproc
 394              	.LFE31:
 396              		.section	.text.Resume_Init,"ax",%progbits
 397              		.align	1
 398              		.p2align 2,,3
 399              		.global	Resume_Init
 400              		.syntax unified
 401              		.thumb
 402              		.thumb_func
 403              		.fpu softvfp
 405              	Resume_Init:
 406              	.LFB32:
 236:../application/Src/usb_pwr.c **** 
 237:../application/Src/usb_pwr.c **** /**
 238:../application/Src/usb_pwr.c ****   * Function Name  : Resume_Init
 239:../application/Src/usb_pwr.c ****   * Description    : Handles wake-up restoring normal operations
 240:../application/Src/usb_pwr.c ****   * Input          : None.
 241:../application/Src/usb_pwr.c ****   * Output         : None.
 242:../application/Src/usb_pwr.c ****   * Return         : USB_SUCCESS.
 243:../application/Src/usb_pwr.c ****   */
 244:../application/Src/usb_pwr.c **** void Resume_Init(void)
 245:../application/Src/usb_pwr.c **** {
 407              		.loc 1 245 1 is_stmt 1 view -0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 0, uses_anonymous_args = 0
 411              		@ link register save eliminated.
 246:../application/Src/usb_pwr.c ****   uint16_t wCNTR;
 412              		.loc 1 246 3 view .LVU156
 247:../application/Src/usb_pwr.c ****   
 248:../application/Src/usb_pwr.c ****   /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
 249:../application/Src/usb_pwr.c ****   /* restart the clocks */
 250:../application/Src/usb_pwr.c ****   /* ...  */
 251:../application/Src/usb_pwr.c **** 
 252:../application/Src/usb_pwr.c ****   /* CNTR_LPMODE = 0 */
 253:../application/Src/usb_pwr.c ****   wCNTR = _GetCNTR();
 413              		.loc 1 253 3 view .LVU157
 254:../application/Src/usb_pwr.c ****   wCNTR &= (~CNTR_LPMODE);
 255:../application/Src/usb_pwr.c ****   _SetCNTR(wCNTR);    
 414              		.loc 1 255 3 is_stmt 0 view .LVU158
 415 0000 4FF6FB72 		movw	r2, #65531
 256:../application/Src/usb_pwr.c **** 
 257:../application/Src/usb_pwr.c **** #ifdef USB_LOW_PWR_MGMT_SUPPORT  
 258:../application/Src/usb_pwr.c ****   /* restore full power */
ARM GAS  /tmp/ccX1Gi0T.s 			page 14


 259:../application/Src/usb_pwr.c ****   /* ... on connected devices */
 260:../application/Src/usb_pwr.c ****   Leave_LowPowerMode();
 261:../application/Src/usb_pwr.c ****   
 262:../application/Src/usb_pwr.c **** #endif /* USB_LOW_PWR_MGMT_SUPPORT */
 263:../application/Src/usb_pwr.c ****   /* reset FSUSP bit */
 264:../application/Src/usb_pwr.c ****   _SetCNTR(IMR_MSK);
 416              		.loc 1 264 3 view .LVU159
 417 0004 4FF43F41 		mov	r1, #48896
 253:../application/Src/usb_pwr.c ****   wCNTR &= (~CNTR_LPMODE);
 418              		.loc 1 253 11 view .LVU160
 419 0008 024B     		ldr	r3, .L18
 420 000a 1868     		ldr	r0, [r3]
 421              	.LVL19:
 254:../application/Src/usb_pwr.c ****   wCNTR &= (~CNTR_LPMODE);
 422              		.loc 1 254 3 is_stmt 1 view .LVU161
 255:../application/Src/usb_pwr.c **** 
 423              		.loc 1 255 3 view .LVU162
 424 000c 0240     		ands	r2, r2, r0
 425 000e 1A60     		str	r2, [r3]
 426              		.loc 1 264 3 view .LVU163
 427 0010 1960     		str	r1, [r3]
 265:../application/Src/usb_pwr.c **** 
 266:../application/Src/usb_pwr.c ****   /* reverse suspend preparation */
 267:../application/Src/usb_pwr.c ****   /* ... */ 
 268:../application/Src/usb_pwr.c **** 
 269:../application/Src/usb_pwr.c **** }
 428              		.loc 1 269 1 is_stmt 0 view .LVU164
 429 0012 7047     		bx	lr
 430              	.L19:
 431              		.align	2
 432              	.L18:
 433 0014 405C0040 		.word	1073765440
 434              		.cfi_endproc
 435              	.LFE32:
 437              		.section	.text.Resume,"ax",%progbits
 438              		.align	1
 439              		.p2align 2,,3
 440              		.global	Resume
 441              		.syntax unified
 442              		.thumb
 443              		.thumb_func
 444              		.fpu softvfp
 446              	Resume:
 447              	.LVL20:
 448              	.LFB33:
 270:../application/Src/usb_pwr.c **** 
 271:../application/Src/usb_pwr.c **** /*******************************************************************************
 272:../application/Src/usb_pwr.c **** * Function Name  : Resume
 273:../application/Src/usb_pwr.c **** * Description    : This is the state machine handling resume operations and
 274:../application/Src/usb_pwr.c **** *                 timing sequence. The control is based on the Resume structure
 275:../application/Src/usb_pwr.c **** *                 variables and on the ESOF interrupt calling this subroutine
 276:../application/Src/usb_pwr.c **** *                 without changing machine state.
 277:../application/Src/usb_pwr.c **** * Input          : a state machine value (RESUME_STATE)
 278:../application/Src/usb_pwr.c **** *                  RESUME_ESOF doesn't change ResumeS.eState allowing
 279:../application/Src/usb_pwr.c **** *                  decrementing of the ESOF counter in different states.
 280:../application/Src/usb_pwr.c **** * Output         : None.
 281:../application/Src/usb_pwr.c **** * Return         : None.
ARM GAS  /tmp/ccX1Gi0T.s 			page 15


 282:../application/Src/usb_pwr.c **** *******************************************************************************/
 283:../application/Src/usb_pwr.c **** void Resume(RESUME_STATE eResumeSetVal)
 284:../application/Src/usb_pwr.c **** {
 449              		.loc 1 284 1 is_stmt 1 view -0
 450              		.cfi_startproc
 451              		@ args = 0, pretend = 0, frame = 0
 452              		@ frame_needed = 0, uses_anonymous_args = 0
 453              		@ link register save eliminated.
 285:../application/Src/usb_pwr.c ****   uint16_t wCNTR;
 454              		.loc 1 285 3 view .LVU166
 286:../application/Src/usb_pwr.c **** 
 287:../application/Src/usb_pwr.c ****   if (eResumeSetVal != RESUME_ESOF)
 455              		.loc 1 287 3 view .LVU167
 284:../application/Src/usb_pwr.c ****   uint16_t wCNTR;
 456              		.loc 1 284 1 is_stmt 0 view .LVU168
 457 0000 70B4     		push	{r4, r5, r6}
 458              	.LCFI5:
 459              		.cfi_def_cfa_offset 12
 460              		.cfi_offset 4, -12
 461              		.cfi_offset 5, -8
 462              		.cfi_offset 6, -4
 288:../application/Src/usb_pwr.c ****     ResumeS.eState = eResumeSetVal;
 463              		.loc 1 288 20 view .LVU169
 464 0002 314B     		ldr	r3, .L38
 287:../application/Src/usb_pwr.c ****     ResumeS.eState = eResumeSetVal;
 465              		.loc 1 287 6 view .LVU170
 466 0004 0728     		cmp	r0, #7
 467              		.loc 1 288 5 is_stmt 1 view .LVU171
 289:../application/Src/usb_pwr.c ****   switch (ResumeS.eState)
 468              		.loc 1 289 3 view .LVU172
 288:../application/Src/usb_pwr.c ****     ResumeS.eState = eResumeSetVal;
 469              		.loc 1 288 20 is_stmt 0 view .LVU173
 470 0006 18BF     		it	ne
 471 0008 1870     		strbne	r0, [r3]
 472              		.loc 1 289 18 view .LVU174
 473 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 474 000c 052A     		cmp	r2, #5
 475 000e 57D8     		bhi	.L22
 476 0010 DFE802F0 		tbb	[pc, r2]
 477              	.L24:
 478 0014 17       		.byte	(.L29-.L24)/2
 479 0015 27       		.byte	(.L28-.L24)/2
 480 0016 4D       		.byte	(.L27-.L24)/2
 481 0017 37       		.byte	(.L26-.L24)/2
 482 0018 41       		.byte	(.L25-.L24)/2
 483 0019 03       		.byte	(.L23-.L24)/2
 484              		.p2align 1
 485              	.L23:
 290:../application/Src/usb_pwr.c ****   {
 291:../application/Src/usb_pwr.c ****     case RESUME_EXTERNAL:
 292:../application/Src/usb_pwr.c ****       if (remotewakeupon ==0)
 293:../application/Src/usb_pwr.c ****       {
 294:../application/Src/usb_pwr.c ****         Resume_Init();
 295:../application/Src/usb_pwr.c ****         ResumeS.eState = RESUME_OFF;
 296:../application/Src/usb_pwr.c ****       }
 297:../application/Src/usb_pwr.c ****       else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
 298:../application/Src/usb_pwr.c ****       {
ARM GAS  /tmp/ccX1Gi0T.s 			page 16


 299:../application/Src/usb_pwr.c ****         ResumeS.eState = RESUME_ON;
 300:../application/Src/usb_pwr.c ****       }
 301:../application/Src/usb_pwr.c ****       break;
 302:../application/Src/usb_pwr.c ****     case RESUME_INTERNAL:
 303:../application/Src/usb_pwr.c ****       Resume_Init();
 304:../application/Src/usb_pwr.c ****       ResumeS.eState = RESUME_START;
 305:../application/Src/usb_pwr.c ****       remotewakeupon = 1;
 306:../application/Src/usb_pwr.c ****       break;
 307:../application/Src/usb_pwr.c ****     case RESUME_LATER:
 308:../application/Src/usb_pwr.c ****       ResumeS.bESOFcnt = 2;
 309:../application/Src/usb_pwr.c ****       ResumeS.eState = RESUME_WAIT;
 310:../application/Src/usb_pwr.c ****       break;
 311:../application/Src/usb_pwr.c ****     case RESUME_WAIT:
 312:../application/Src/usb_pwr.c ****       ResumeS.bESOFcnt--;
 313:../application/Src/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 314:../application/Src/usb_pwr.c ****         ResumeS.eState = RESUME_START;
 315:../application/Src/usb_pwr.c ****       break;
 316:../application/Src/usb_pwr.c ****     case RESUME_START:
 317:../application/Src/usb_pwr.c ****       wCNTR = _GetCNTR();
 318:../application/Src/usb_pwr.c ****       wCNTR |= CNTR_RESUME;
 319:../application/Src/usb_pwr.c ****       _SetCNTR(wCNTR);
 320:../application/Src/usb_pwr.c ****       ResumeS.eState = RESUME_ON;
 321:../application/Src/usb_pwr.c ****       ResumeS.bESOFcnt = 10;
 322:../application/Src/usb_pwr.c ****       break;
 323:../application/Src/usb_pwr.c ****     case RESUME_ON:    
 324:../application/Src/usb_pwr.c ****       ResumeS.bESOFcnt--;
 486              		.loc 1 324 7 is_stmt 1 view .LVU175
 487              		.loc 1 324 14 is_stmt 0 view .LVU176
 488 001a 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 489              		.loc 1 324 23 view .LVU177
 490 001c 013A     		subs	r2, r2, #1
 491 001e D2B2     		uxtb	r2, r2
 492 0020 5A70     		strb	r2, [r3, #1]
 325:../application/Src/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 493              		.loc 1 325 7 is_stmt 1 view .LVU178
 494              		.loc 1 325 18 is_stmt 0 view .LVU179
 495 0022 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 496              		.loc 1 325 10 view .LVU180
 497 0024 02F0FF01 		and	r1, r2, #255
 498 0028 4AB9     		cbnz	r2, .L20
 326:../application/Src/usb_pwr.c ****       {
 327:../application/Src/usb_pwr.c ****         wCNTR = _GetCNTR();
 499              		.loc 1 327 9 is_stmt 1 view .LVU181
 328:../application/Src/usb_pwr.c ****         wCNTR &= (~CNTR_RESUME);
 329:../application/Src/usb_pwr.c ****         _SetCNTR(wCNTR);
 500              		.loc 1 329 9 is_stmt 0 view .LVU182
 501 002a 4FF6EF72 		movw	r2, #65519
 330:../application/Src/usb_pwr.c ****         ResumeS.eState = RESUME_OFF;
 502              		.loc 1 330 24 view .LVU183
 503 002e 0625     		movs	r5, #6
 327:../application/Src/usb_pwr.c ****         wCNTR &= (~CNTR_RESUME);
 504              		.loc 1 327 17 view .LVU184
 505 0030 2648     		ldr	r0, .L38+4
 506              	.LVL21:
 331:../application/Src/usb_pwr.c ****         remotewakeupon = 0;
 507              		.loc 1 331 24 view .LVU185
 508 0032 274C     		ldr	r4, .L38+8
ARM GAS  /tmp/ccX1Gi0T.s 			page 17


 327:../application/Src/usb_pwr.c ****         wCNTR &= (~CNTR_RESUME);
 509              		.loc 1 327 17 view .LVU186
 510 0034 0668     		ldr	r6, [r0]
 511              	.LVL22:
 328:../application/Src/usb_pwr.c ****         _SetCNTR(wCNTR);
 512              		.loc 1 328 9 is_stmt 1 view .LVU187
 329:../application/Src/usb_pwr.c ****         ResumeS.eState = RESUME_OFF;
 513              		.loc 1 329 9 view .LVU188
 514 0036 3240     		ands	r2, r2, r6
 515 0038 0260     		str	r2, [r0]
 330:../application/Src/usb_pwr.c ****         remotewakeupon = 0;
 516              		.loc 1 330 9 view .LVU189
 330:../application/Src/usb_pwr.c ****         remotewakeupon = 0;
 517              		.loc 1 330 24 is_stmt 0 view .LVU190
 518 003a 1D70     		strb	r5, [r3]
 519              		.loc 1 331 9 is_stmt 1 view .LVU191
 520              		.loc 1 331 24 is_stmt 0 view .LVU192
 521 003c 2160     		str	r1, [r4]
 522              	.LVL23:
 523              	.L20:
 332:../application/Src/usb_pwr.c ****       }
 333:../application/Src/usb_pwr.c ****       break;
 334:../application/Src/usb_pwr.c ****     case RESUME_OFF:
 335:../application/Src/usb_pwr.c ****     case RESUME_ESOF:
 336:../application/Src/usb_pwr.c ****     default:
 337:../application/Src/usb_pwr.c ****       ResumeS.eState = RESUME_OFF;
 338:../application/Src/usb_pwr.c ****       break;
 339:../application/Src/usb_pwr.c ****   }
 340:../application/Src/usb_pwr.c **** }
 524              		.loc 1 340 1 view .LVU193
 525 003e 70BC     		pop	{r4, r5, r6}
 526              	.LCFI6:
 527              		.cfi_remember_state
 528              		.cfi_restore 6
 529              		.cfi_restore 5
 530              		.cfi_restore 4
 531              		.cfi_def_cfa_offset 0
 532 0040 7047     		bx	lr
 533              	.LVL24:
 534              	.L29:
 535              	.LCFI7:
 536              		.cfi_restore_state
 292:../application/Src/usb_pwr.c ****       {
 537              		.loc 1 292 7 is_stmt 1 view .LVU194
 292:../application/Src/usb_pwr.c ****       {
 538              		.loc 1 292 26 is_stmt 0 view .LVU195
 539 0042 234A     		ldr	r2, .L38+8
 540 0044 1268     		ldr	r2, [r2]
 292:../application/Src/usb_pwr.c ****       {
 541              		.loc 1 292 10 view .LVU196
 542 0046 002A     		cmp	r2, #0
 543 0048 37D1     		bne	.L30
 294:../application/Src/usb_pwr.c ****         ResumeS.eState = RESUME_OFF;
 544              		.loc 1 294 9 is_stmt 1 view .LVU197
 545              	.LBB6:
 546              	.LBI6:
 244:../application/Src/usb_pwr.c **** {
ARM GAS  /tmp/ccX1Gi0T.s 			page 18


 547              		.loc 1 244 6 view .LVU198
 548              	.LBB7:
 246:../application/Src/usb_pwr.c ****   
 549              		.loc 1 246 3 view .LVU199
 253:../application/Src/usb_pwr.c ****   wCNTR &= (~CNTR_LPMODE);
 550              		.loc 1 253 3 view .LVU200
 255:../application/Src/usb_pwr.c **** 
 551              		.loc 1 255 3 is_stmt 0 view .LVU201
 552 004a 4FF6FB71 		movw	r1, #65531
 264:../application/Src/usb_pwr.c **** 
 553              		.loc 1 264 3 view .LVU202
 554 004e 4FF43F44 		mov	r4, #48896
 555              	.LBE7:
 556              	.LBE6:
 295:../application/Src/usb_pwr.c ****       }
 557              		.loc 1 295 24 view .LVU203
 558 0052 0620     		movs	r0, #6
 559              	.LVL25:
 560              	.LBB9:
 561              	.LBB8:
 253:../application/Src/usb_pwr.c ****   wCNTR &= (~CNTR_LPMODE);
 562              		.loc 1 253 11 view .LVU204
 563 0054 1D4A     		ldr	r2, .L38+4
 564 0056 1568     		ldr	r5, [r2]
 565              	.LVL26:
 254:../application/Src/usb_pwr.c ****   _SetCNTR(wCNTR);    
 566              		.loc 1 254 3 is_stmt 1 view .LVU205
 255:../application/Src/usb_pwr.c **** 
 567              		.loc 1 255 3 view .LVU206
 568 0058 2940     		ands	r1, r1, r5
 569 005a 1160     		str	r1, [r2]
 264:../application/Src/usb_pwr.c **** 
 570              		.loc 1 264 3 view .LVU207
 571 005c 1460     		str	r4, [r2]
 572              	.LVL27:
 264:../application/Src/usb_pwr.c **** 
 573              		.loc 1 264 3 is_stmt 0 view .LVU208
 574              	.LBE8:
 575              	.LBE9:
 295:../application/Src/usb_pwr.c ****       }
 576              		.loc 1 295 9 is_stmt 1 view .LVU209
 295:../application/Src/usb_pwr.c ****       }
 577              		.loc 1 295 24 is_stmt 0 view .LVU210
 578 005e 1870     		strb	r0, [r3]
 579 0060 EDE7     		b	.L20
 580              	.LVL28:
 581              	.L28:
 303:../application/Src/usb_pwr.c ****       ResumeS.eState = RESUME_START;
 582              		.loc 1 303 7 is_stmt 1 view .LVU211
 583              	.LBB10:
 584              	.LBI10:
 244:../application/Src/usb_pwr.c **** {
 585              		.loc 1 244 6 view .LVU212
 586              	.LBB11:
 246:../application/Src/usb_pwr.c ****   
 587              		.loc 1 246 3 view .LVU213
 253:../application/Src/usb_pwr.c ****   wCNTR &= (~CNTR_LPMODE);
ARM GAS  /tmp/ccX1Gi0T.s 			page 19


 588              		.loc 1 253 3 view .LVU214
 255:../application/Src/usb_pwr.c **** 
 589              		.loc 1 255 3 is_stmt 0 view .LVU215
 590 0062 4FF6FB71 		movw	r1, #65531
 264:../application/Src/usb_pwr.c **** 
 591              		.loc 1 264 3 view .LVU216
 592 0066 4FF43F45 		mov	r5, #48896
 593              	.LBE11:
 594              	.LBE10:
 304:../application/Src/usb_pwr.c ****       remotewakeupon = 1;
 595              		.loc 1 304 22 view .LVU217
 596 006a 0424     		movs	r4, #4
 305:../application/Src/usb_pwr.c ****       break;
 597              		.loc 1 305 22 view .LVU218
 598 006c 0120     		movs	r0, #1
 599              	.LVL29:
 600              	.LBB14:
 601              	.LBB12:
 253:../application/Src/usb_pwr.c ****   wCNTR &= (~CNTR_LPMODE);
 602              		.loc 1 253 11 view .LVU219
 603 006e 174A     		ldr	r2, .L38+4
 604 0070 1668     		ldr	r6, [r2]
 605              	.LVL30:
 254:../application/Src/usb_pwr.c ****   _SetCNTR(wCNTR);    
 606              		.loc 1 254 3 is_stmt 1 view .LVU220
 255:../application/Src/usb_pwr.c **** 
 607              		.loc 1 255 3 view .LVU221
 608 0072 3140     		ands	r1, r1, r6
 609 0074 1160     		str	r1, [r2]
 264:../application/Src/usb_pwr.c **** 
 610              		.loc 1 264 3 view .LVU222
 611              	.LBE12:
 612              	.LBE14:
 305:../application/Src/usb_pwr.c ****       break;
 613              		.loc 1 305 22 is_stmt 0 view .LVU223
 614 0076 1649     		ldr	r1, .L38+8
 615              	.LBB15:
 616              	.LBB13:
 264:../application/Src/usb_pwr.c **** 
 617              		.loc 1 264 3 view .LVU224
 618 0078 1560     		str	r5, [r2]
 619              	.LVL31:
 264:../application/Src/usb_pwr.c **** 
 620              		.loc 1 264 3 view .LVU225
 621              	.LBE13:
 622              	.LBE15:
 304:../application/Src/usb_pwr.c ****       remotewakeupon = 1;
 623              		.loc 1 304 7 is_stmt 1 view .LVU226
 304:../application/Src/usb_pwr.c ****       remotewakeupon = 1;
 624              		.loc 1 304 22 is_stmt 0 view .LVU227
 625 007a 1C70     		strb	r4, [r3]
 305:../application/Src/usb_pwr.c ****       break;
 626              		.loc 1 305 7 is_stmt 1 view .LVU228
 627              		.loc 1 340 1 is_stmt 0 view .LVU229
 628 007c 70BC     		pop	{r4, r5, r6}
 629              	.LCFI8:
 630              		.cfi_remember_state
ARM GAS  /tmp/ccX1Gi0T.s 			page 20


 631              		.cfi_restore 6
 632              		.cfi_restore 5
 633              		.cfi_restore 4
 634              		.cfi_def_cfa_offset 0
 305:../application/Src/usb_pwr.c ****       break;
 635              		.loc 1 305 22 view .LVU230
 636 007e 0860     		str	r0, [r1]
 306:../application/Src/usb_pwr.c ****     case RESUME_LATER:
 637              		.loc 1 306 7 is_stmt 1 view .LVU231
 638              		.loc 1 340 1 is_stmt 0 view .LVU232
 639 0080 7047     		bx	lr
 640              	.LVL32:
 641              	.L26:
 642              	.LCFI9:
 643              		.cfi_restore_state
 312:../application/Src/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 644              		.loc 1 312 7 is_stmt 1 view .LVU233
 312:../application/Src/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 645              		.loc 1 312 14 is_stmt 0 view .LVU234
 646 0082 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 312:../application/Src/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 647              		.loc 1 312 23 view .LVU235
 648 0084 013A     		subs	r2, r2, #1
 649 0086 D2B2     		uxtb	r2, r2
 650 0088 5A70     		strb	r2, [r3, #1]
 313:../application/Src/usb_pwr.c ****         ResumeS.eState = RESUME_START;
 651              		.loc 1 313 7 is_stmt 1 view .LVU236
 313:../application/Src/usb_pwr.c ****         ResumeS.eState = RESUME_START;
 652              		.loc 1 313 18 is_stmt 0 view .LVU237
 653 008a 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 313:../application/Src/usb_pwr.c ****         ResumeS.eState = RESUME_START;
 654              		.loc 1 313 10 view .LVU238
 655 008c 002A     		cmp	r2, #0
 656 008e D6D1     		bne	.L20
 314:../application/Src/usb_pwr.c ****       break;
 657              		.loc 1 314 9 is_stmt 1 view .LVU239
 314:../application/Src/usb_pwr.c ****       break;
 658              		.loc 1 314 24 is_stmt 0 view .LVU240
 659 0090 0422     		movs	r2, #4
 660 0092 1A70     		strb	r2, [r3]
 661 0094 D3E7     		b	.L20
 662              	.L25:
 317:../application/Src/usb_pwr.c ****       wCNTR |= CNTR_RESUME;
 663              		.loc 1 317 7 is_stmt 1 view .LVU241
 320:../application/Src/usb_pwr.c ****       ResumeS.bESOFcnt = 10;
 664              		.loc 1 320 22 is_stmt 0 view .LVU242
 665 0096 0524     		movs	r4, #5
 321:../application/Src/usb_pwr.c ****       break;
 666              		.loc 1 321 24 view .LVU243
 667 0098 0A20     		movs	r0, #10
 668              	.LVL33:
 317:../application/Src/usb_pwr.c ****       wCNTR |= CNTR_RESUME;
 669              		.loc 1 317 15 view .LVU244
 670 009a 0C49     		ldr	r1, .L38+4
 671 009c 0A68     		ldr	r2, [r1]
 317:../application/Src/usb_pwr.c ****       wCNTR |= CNTR_RESUME;
 672              		.loc 1 317 13 view .LVU245
ARM GAS  /tmp/ccX1Gi0T.s 			page 21


 673 009e 92B2     		uxth	r2, r2
 674              	.LVL34:
 318:../application/Src/usb_pwr.c ****       _SetCNTR(wCNTR);
 675              		.loc 1 318 7 is_stmt 1 view .LVU246
 319:../application/Src/usb_pwr.c ****       ResumeS.eState = RESUME_ON;
 676              		.loc 1 319 7 view .LVU247
 677 00a0 42F01002 		orr	r2, r2, #16
 678              	.LVL35:
 319:../application/Src/usb_pwr.c ****       ResumeS.eState = RESUME_ON;
 679              		.loc 1 319 7 is_stmt 0 view .LVU248
 680 00a4 0A60     		str	r2, [r1]
 320:../application/Src/usb_pwr.c ****       ResumeS.bESOFcnt = 10;
 681              		.loc 1 320 7 is_stmt 1 view .LVU249
 320:../application/Src/usb_pwr.c ****       ResumeS.bESOFcnt = 10;
 682              		.loc 1 320 22 is_stmt 0 view .LVU250
 683 00a6 1C70     		strb	r4, [r3]
 321:../application/Src/usb_pwr.c ****       break;
 684              		.loc 1 321 7 is_stmt 1 view .LVU251
 321:../application/Src/usb_pwr.c ****       break;
 685              		.loc 1 321 24 is_stmt 0 view .LVU252
 686 00a8 5870     		strb	r0, [r3, #1]
 322:../application/Src/usb_pwr.c ****     case RESUME_ON:    
 687              		.loc 1 322 7 is_stmt 1 view .LVU253
 688              		.loc 1 340 1 is_stmt 0 view .LVU254
 689 00aa 70BC     		pop	{r4, r5, r6}
 690              	.LCFI10:
 691              		.cfi_remember_state
 692              		.cfi_restore 6
 693              		.cfi_restore 5
 694              		.cfi_restore 4
 695              		.cfi_def_cfa_offset 0
 696 00ac 7047     		bx	lr
 697              	.LVL36:
 698              	.L27:
 699              	.LCFI11:
 700              		.cfi_restore_state
 308:../application/Src/usb_pwr.c ****       ResumeS.eState = RESUME_WAIT;
 701              		.loc 1 308 7 is_stmt 1 view .LVU255
 308:../application/Src/usb_pwr.c ****       ResumeS.eState = RESUME_WAIT;
 702              		.loc 1 308 24 is_stmt 0 view .LVU256
 703 00ae 0221     		movs	r1, #2
 309:../application/Src/usb_pwr.c ****       break;
 704              		.loc 1 309 22 view .LVU257
 705 00b0 0322     		movs	r2, #3
 308:../application/Src/usb_pwr.c ****       ResumeS.eState = RESUME_WAIT;
 706              		.loc 1 308 24 view .LVU258
 707 00b2 5970     		strb	r1, [r3, #1]
 309:../application/Src/usb_pwr.c ****       break;
 708              		.loc 1 309 7 is_stmt 1 view .LVU259
 309:../application/Src/usb_pwr.c ****       break;
 709              		.loc 1 309 22 is_stmt 0 view .LVU260
 710 00b4 1A70     		strb	r2, [r3]
 310:../application/Src/usb_pwr.c ****     case RESUME_WAIT:
 711              		.loc 1 310 7 is_stmt 1 view .LVU261
 712              		.loc 1 340 1 is_stmt 0 view .LVU262
 713 00b6 70BC     		pop	{r4, r5, r6}
 714              	.LCFI12:
ARM GAS  /tmp/ccX1Gi0T.s 			page 22


 715              		.cfi_remember_state
 716              		.cfi_restore 6
 717              		.cfi_restore 5
 718              		.cfi_restore 4
 719              		.cfi_def_cfa_offset 0
 720 00b8 7047     		bx	lr
 721              	.L30:
 722              	.LCFI13:
 723              		.cfi_restore_state
 299:../application/Src/usb_pwr.c ****       }
 724              		.loc 1 299 9 is_stmt 1 view .LVU263
 299:../application/Src/usb_pwr.c ****       }
 725              		.loc 1 299 24 is_stmt 0 view .LVU264
 726 00ba 0522     		movs	r2, #5
 727 00bc 1A70     		strb	r2, [r3]
 728 00be BEE7     		b	.L20
 729              	.L22:
 337:../application/Src/usb_pwr.c ****       break;
 730              		.loc 1 337 7 is_stmt 1 view .LVU265
 337:../application/Src/usb_pwr.c ****       break;
 731              		.loc 1 337 22 is_stmt 0 view .LVU266
 732 00c0 0622     		movs	r2, #6
 733 00c2 1A70     		strb	r2, [r3]
 338:../application/Src/usb_pwr.c ****   }
 734              		.loc 1 338 7 is_stmt 1 view .LVU267
 735              		.loc 1 340 1 is_stmt 0 view .LVU268
 736 00c4 BBE7     		b	.L20
 737              	.L39:
 738 00c6 00BF     		.align	2
 739              	.L38:
 740 00c8 00000000 		.word	ResumeS
 741 00cc 405C0040 		.word	1073765440
 742 00d0 00000000 		.word	.LANCHOR0
 743              		.cfi_endproc
 744              	.LFE33:
 746              		.global	remotewakeupon
 747              		.comm	ResumeS,2,4
 748              		.comm	EP,32,4
 749              		.global	fSuspendEnabled
 750              		.global	bDeviceState
 751              		.section	.bss.bDeviceState,"aw",%nobits
 752              		.align	2
 755              	bDeviceState:
 756 0000 00000000 		.space	4
 757              		.section	.bss.remotewakeupon,"aw",%nobits
 758              		.align	2
 759              		.set	.LANCHOR0,. + 0
 762              	remotewakeupon:
 763 0000 00000000 		.space	4
 764              		.section	.data.fSuspendEnabled,"aw"
 767              	fSuspendEnabled:
 768 0000 01       		.byte	1
 769              		.text
 770              	.Letext0:
 771              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 772              		.file 3 "../Drivers/CMSIS/CM3/CoreSupport/core_cm3.h"
 773              		.file 4 "../Drivers/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h"
ARM GAS  /tmp/ccX1Gi0T.s 			page 23


 774              		.file 5 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_type.h"
 775              		.file 6 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_regs.h"
 776              		.file 7 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_core.h"
 777              		.file 8 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_init.h"
 778              		.file 9 "../Drivers/STM32_USB-FS-Device_Driver/inc/usb_lib.h"
 779              		.file 10 "../application/Inc/usb_pwr.h"
ARM GAS  /tmp/ccX1Gi0T.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_pwr.c
     /tmp/ccX1Gi0T.s:16     .text.PowerOn:0000000000000000 $t
     /tmp/ccX1Gi0T.s:25     .text.PowerOn:0000000000000000 PowerOn
     /tmp/ccX1Gi0T.s:86     .text.PowerOn:0000000000000028 $d
     /tmp/ccX1Gi0T.s:93     .text.PowerOff:0000000000000000 $t
     /tmp/ccX1Gi0T.s:101    .text.PowerOff:0000000000000000 PowerOff
     /tmp/ccX1Gi0T.s:142    .text.PowerOff:0000000000000018 $d
     /tmp/ccX1Gi0T.s:148    .text.Suspend:0000000000000000 $t
     /tmp/ccX1Gi0T.s:156    .text.Suspend:0000000000000000 Suspend
     /tmp/ccX1Gi0T.s:387    .text.Suspend:00000000000000b0 $d
                            *COM*:0000000000000020 EP
     /tmp/ccX1Gi0T.s:397    .text.Resume_Init:0000000000000000 $t
     /tmp/ccX1Gi0T.s:405    .text.Resume_Init:0000000000000000 Resume_Init
     /tmp/ccX1Gi0T.s:433    .text.Resume_Init:0000000000000014 $d
     /tmp/ccX1Gi0T.s:438    .text.Resume:0000000000000000 $t
     /tmp/ccX1Gi0T.s:446    .text.Resume:0000000000000000 Resume
     /tmp/ccX1Gi0T.s:478    .text.Resume:0000000000000014 $d
     /tmp/ccX1Gi0T.s:484    .text.Resume:000000000000001a $t
     /tmp/ccX1Gi0T.s:740    .text.Resume:00000000000000c8 $d
                            *COM*:0000000000000002 ResumeS
     /tmp/ccX1Gi0T.s:762    .bss.remotewakeupon:0000000000000000 remotewakeupon
     /tmp/ccX1Gi0T.s:767    .data.fSuspendEnabled:0000000000000000 fSuspendEnabled
     /tmp/ccX1Gi0T.s:755    .bss.bDeviceState:0000000000000000 bDeviceState
     /tmp/ccX1Gi0T.s:752    .bss.bDeviceState:0000000000000000 $d
     /tmp/ccX1Gi0T.s:758    .bss.remotewakeupon:0000000000000000 $d

UNDEFINED SYMBOLS
SetISTR
wInterrupt_Mask
